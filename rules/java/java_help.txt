This document describes the behavior of 'java' abuild rules.  The
default behavior is described first.  Following that is a description
of how the behavior of the rules can be modified by setting
parameters.  If you discover something that you cannot parameterize
but should be able to, please report it as a bug.

(XXX Stylistic note: in general, I'm using camelCaps for parameter
names and map keys.  An exception is when keys map to something that
is an attribute or nested element to an ant task.  If anyone cares, we
can come up with some conventions.  I want to avoid dashes because of
the complexity they cause in setting parameter values in Abuild.groovy
files.)


Default Behavior
================

Compilation
-----------

Compilation is performed by the 'compile' target, which depends on
'init' and 'generate'.

Before compilation is started, the pre-compile target is explicitly
run.

After compilation is finished, the post-compile target is explicitly
run.

No.  See TODO.


(XXX The pre-compile and post-compile targets may feel like a
re-invention of hooks.  Is this okay?  The idea here is to make it
easier for things like coberatura or static analyzers to be hooked
into the compilation process without having to worry about the shape
of the full dependency graph.)

If src/java or $(ABUILD_OUTPUT_DIR)/src/java exists:

   All .java files are compiled into classes that are written into
   $(ABUILD_OUTPUT_DIR)/classes.

   The compile-time classpath is set to (XXX what?)

   The compiler is invoked with debugging and deprecation turned on
   and with the -Xlint and -Xlint:-path arguments.


Packaging
---------

Compilation is performed by the 'package' target, which depends on
'package-jar'.


Creation of JAR files
---------------------

Creation of JAR files is performed by the 'package-jar' target, which
depends on 'compile'.

If the java.jarName parameter is set to a single string value, a JAR
file will be created by that name in $(ABUILD_OUTPUT_DIR)/dist.  The
JAR file will have the following properties:

 * It will contain all files in $(ABUILD_OUTPUT_DIR)/classes,
   src/resources, and $(ABUILD_OUTPUT_DIR)/src/resources.

 * Its META-INF will be populated with files from src/conf and
   $(ABUILD_OUTPUT_DIR)/src/conf.

 * In the JAR manifest, the Class-Path attribute will be set to the
   list of JARs assigned to the abuild.manifestClasspath interface
   variable (last path element only of each archive) by build items on
   which this item depends directly.  If the java.mainClass parameter
   is set, the Main-Class manifest attribute is set to the value of
   that parameter.


Parameters
==========

Whenever a parameter described below is expected to be a list, any
assignment of a single value to that parameter is treated as if the
assignment were of a list containing that value.

General Defaults
----------------

The following parameters can be used to override general defaults:

(XXX Which should be plural?  What should we do with generated dirs
when the other one is overridden?  After all, there's nothing to
prevent people from adding generated directories to srcDirs, etc.)

  java.distDir
  java.classesDir
  java.docDirs
  java.srcDirs
  java.resourcesDirs
  java.confDirs

  (read only)
  java.generatedSrcDir
  java.generatedResourcesDir
  java.generatedConfDir


Compliation
-----------

If the parameter java.compile is set, it is treated as a list, and
each element of the list represents one compile command.  Each element
of the list can be either a closure or a map.  If it is a closure, the
compile target just executes the closure.

If it is map, the elements of the map parameterize the compilation as
follows.  In all cases, if a parameter is not set, the same defaults
are used as above.

  srcdirs: a list of source directories from which to find .java
  files

  destdir: the directory into which .class files should be written

  classpath: a list of jars to be included in the classpath

  includes: a list of values to be used as nested <include> elements

  excludes: a list of values to be used as nested <exclude> elements

  compilerargs: a list of values to be passed to the compiler

Any remaining map keys are treated as additional attributes to the
javac task.  If any map elements' values are lists, the elements of
the list are joined using the appropriate path separator for the
current platform.

JAR Packaging
-------------

If the parameter java.packageJar is set, it is treated as a list, and
each element of the list represents one JAR file to be created.  If
the java.jarName parameter is also set, then java.packageJar may
contain only a single element, which must be a map that does not
contain the jarName key, which will be treated as if its jarName key
were set to the value of java.jarName.  Otherwise, each element of
java.packageJar may be a closure or a map.  If it is a closure, the
package-jar target just executes the closure.

If it is a map, the packaging is parameterized as follows.  In all
cases, if a key is omitted, the default value is used.

  jarName: contains the name of the JAR file to be created

  distDir: the directory into which the JAR file will be created.
