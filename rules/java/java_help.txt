
This document describes the behavior of 'java' abuild rules.  The
default behavior is described first.  Following that is a description
of how the behavior of the rules can be modified by setting
parameters.  If you discover something that you cannot parameterize
but should be able to, please report it as a bug.

(XXX Stylistic note: in general, I'm using camelCaps for parameter
names and map keys.  An exception is when keys map to something that
is an attribute or nested element to an ant task.  If anyone cares, we
can come up with some conventions.  I want to avoid dashes because of
the complexity they cause in setting parameter values in Abuild.groovy
files.)

Targets use abuild.runActions.  We need to document all available
parameters (from _base.groovy) and attribute keys.  Look at the
targets' calls to runActions to see what keys are available and how
they are initialized.

Dependencies:

all -> package -> package-ear -> package-war -> sign-jars -> copy-jars
  -> package-jar -> compile -> generate -> init

For war packaging:

 - src/resources is arbitrary content to go into WEB-INF/classes along
   with "classes" directory

 - src/web/content is arbitrary content to go into the root of the war
   along with "copied-jars" directory

 - There are generated versions of these

 - Put classes and resources in WEB-INF/classes via classes task

 - src/web/WEB-INF -> webinf task

 - src/conf/META-INF -> metainf task

 - Jars in java.warLibJars go into lib.  This is empty by default.
   Users can assign abuild.classpath to this.  Jars in this list are
   automatically included in the war through the lib task.  They are
   not copied.

 - Jars in java.copiedJars are be copied into
   $(ABUILD_OUTPUT_DIR)/copied-jars.  These are included in the war
   via fileset.  If parameters for signing are set, these will get
   signed automatically.
