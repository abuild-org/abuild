General
=======

 * abuild --verbose should print the make or ant command.

 * Joe Davison reports: I download abuild 1.0.rc1 from sourceforge
   today.  It does not build natively under Mac OS 10.5.  The issue is
   that the build process looks for the pthread library, but that
   library does not exist under Mac OS.  I commented out the line that
   adds the pthread library in the build process, and it appears to
   build correctly.  I don't have qtest installed yet, so I was not
   able to run the tests.  Additionally, the $(ABUILD_OUTPUT_DIR) is
   "abuild-darwin.unknown.uknown.gcc", which looks a little odd.

 * Additional prerequisites:

    - autoconf >= 2.59

    - automake

    - gnu diffutils

    - gcc configured with gnu ld for shared libraries (or edit
      toolchain support)

 * When building a single item, give some kind of indication of no
   platforms are available.  This way, when someone types "abuild" on
   a windows system without MINGW=1 or the Visual C++ variable, they
   don't get silence.

 * Consider creating a ./configure that finds boost libraries.  Then
   consider packaging auto-srcs with abuild sources.  Check on debian
   to see if this works with the latest flex.  Consider making the
   re-entrant scanner switch, made possible by controlling the flex
   and bison files provided that there is an autoconf check for the
   right versions of flex and bison.  See ~/argon/no-argon-backup/\
   code/reference/lh3/tps/abuild_library/boost/tps-boost_base/autoconf
   for sample boost autoconf code.

 * Ant launcher: consider having a Java-based ant launcher that abuild
   communicates with via some kind of IPC to make launching ant more
   efficient.  See ~/argon/tmp/ant-launcher and email X-ArgonCount:
   23536 in abuild, 4/3/2008, subject "preliminary ant launcher
   experiment".

 * MSVC .NET 2005: see if anything is required for handling manifest
   files.  Matt Nassr says: "I was curious if you could suggest a best
   way to embed manifest files into C/C++ executables generated with
   msvc on Windows. It seems that this needs to be done after the exe
   is generated with the manifest tool (mt.exe), and Iâ€™m wondering if
   I can make this a part of the Abuild build process. Otherwise, I
   have to copy the exe and the manifest file to the binary directory
   for deployment."  Let Matt Nassr know when a solution is found.


Tree Registry
=============

Consider abuild tree registry.  Abuild root item could say something
like:

  tree-name: tree3
  tree-registry: ../../../../Abuild-trees
  external-trees: tree1 tree2

Then Abuild-trees could say

  tree1: a/b/c/one-root
  tree2: a/b/d/two-root

This kind of thing might make sense if you have a single source tree
that is separated into a bunch of abuild build trees that are all
expected to be positioned in the same relative positions with each
other.  It basically makes it more practical to divide up a source
tree into multiple, stand-alone build trees without having to
distribute the knowledge of where all the trees are relative to each
other.

Notes:

 * external-trees and tree-registry can coexist with external-dirs

 * The tree registry file can be resolved in a backing area.

 * There is no requirement that all trees in the registry be found.
   However, any tree that is found must have a name that matches the
   tree-name key in the tree, and any tree that is referenced in an
   external-trees key must be found.

 * Need to figure out exactly how these work with backing areas and
   externals; i.e., we need to at least detect inconsistencies while
   still allowing overrides.


Platform Conditionals
=====================

People want conditional dependencies, but mainly for platform issues.
Consider one or both of the following ideas:

 * Platform restrictions per build item.  If a build item has a
   platform restriction, it will be excluded from the initial build
   set construction.  Then what happens if it get pulled in to satisfy
   a dependency?  This should be an error, but that causes problems in
   some cases.  See next idea for a possible solution.

 * Sometimes we use dependencies just to force something to build, as
   in the case of the "compile-all" item in searchlight or some
   "top-level" builds.  We really need the concept of a "build-also"
   keyword that specifies build items that should be built if this one
   is built.  It effectively just adds them to the build set.  The
   build-also keyword doesn't have any restrictions about cycles -- it
   is just used during inital build set construction.  As such, it can
   have platform-based conditionals.

Using these two features together, it should be possible to achieve
the goal of supporting platform-based conditional dependencies in a
safe manner.


Java Problems
=============

We probably need a different approach to Java.  Ant was not designed
to be used as a framework, and it doesn't work very well when used in
this way.

 * We should add the Main-Class attribute to the manifest of a jar
   when the abuild.main-class property is set:

     <attribute name="Main-Class" value="${abuild.main-class}"/>

   How do we do this conditionally upon the existence of that
   property?  There is a comment in abuild.xml and also various
   remarks in the documentation.  Search for "manifest".

 * In order to get wars in ear files, we need to add them to
   abuild.classpath.  Although this is harmless, it's sort of an abuse
   of abuild.classpath.

 * We don't detect when inaccessible build items are referenced in
   abuild.hook-build-items

 * Abuild has no real way to support a difference between compile-time
   classpaths and run-time classpaths.

 * NOTE: It was necessary to create /usr/{share,lib}/java-1.6.0 in
   order for build-classpath from jpackage to do the right thing when
   launching ant 1.7.0 in fedora core 5.  Not sure how general of a
   problem this is.

 * Reconsider using depends task for compile in abuild.xml.

 * Signed jar support will eventually be required.

 * Our default java compile rule doesn't notice if a .java file was
   removed.  Maybe we want to force full recompilation if the list of
   files changed, or maybe we want to delete class files that appear
   to have come from non-existent java files.  I'm not sure what
   happens with nested/inner classes that disappeared....does javac
   automatically remove the corresponding class files?  This would be
   an easy experiment to try.

 * Consider supporting creation of multiple jar files with different
   contents analogous to different libraries being created from a
   single C++ build item.

 * Ant seems to not complain when populating an ear file from a
   classpath that contains non-existent items.  In general, there may
   be an issue with not getting any notification of non-existent
   classpath items.

 * We use the privately set "debug" and "deprecation" properties in
   abuild.xml to set debug and deprecation.  These should really be set
   using documented abuild properties, and we should figure out what
   other similar properties we might want to set in this way.

 * There is presently no mechanism for adding a new build target that
   is visible to all build items (as one can do with plugin.mk in
   make-based builds).  Figure out again why we can't add a custom
   target in ant code that is loaded as a plugin or hook build item.
   Was there a reason we didn't use import?

   I think the reason is this: with make, if two different build items
   define the same target, if at least one uses a : target instead of
   a :: target, it's an error.  Otherwise, all the variants of the
   target get run.  With ant, there is no such facility.  All but one
   of the definitions of the target will get mangled to
   project.target, and there's no way to run all of the
   implementations.  The only way to get this behavior right now is to
   use hooks.

 * You have to duplicate the archive name (abuild.jar-name, etc.) in
   the Abuild.interface file.


Issues, Enhancement Ideas
=========================

See also "Known Limitations" in the documentation.

 * ant with build failure appears not to exit abnormally in Windows.

 * gen_deps: rewrite so that it doesn't force a runtime dependency on
   perl.  It should be a fallback for cases when compilers can't
   generate dependency information.  With gcc, use -MD -MF -MP to
   generate proper .dep files.  xlc: "-M -MF a.dep" works, but there
   is no equivalent to -MP, so we'll need to postprocess.  VC:
   nothing.

 * Test qtest coverage from abuild test suite

 * Think about implementing a dependency analyzer that would look at
   first-level includes to figure out what the correct list of direct
   dependencies should be.

 * Consider having --silent invoke make with --no-print-directory.  If
   we do this, we should follow build item failure with a message that
   contains the name, path, and platform of whatever failed.

 * Consider having an abuild template generator that can run if no
   Abuild.conf or other files are present.  This would spit out
   commented template files.  Alternatively, could be a command-line
   wizard or something.

 * Need a way to get a list of build items that will be skipped
   because they have no platforms.  There are times when it would be
   nicer if it were an error to have no platforms available for an
   item in your local area rather than to just have it be skipped.

 * Piping ANSI color stuff through ant on Windows doesn't work.  When
   running qtest from ant on Windows, qtest correctly generates the
   ansi color codes, but they don't get displayed right through ant,
   at least in cygwin.

 * To check for all Abuild.mk files that define local targets:
   pcregrep '^\s*\S+\s*:(\Z|[^=])' **/Abuild.mk

 * It might be useful to have the ability to find all references to a
   particular interface variable and/or to find the origin and
   variable history for a specific variable.  This comes back to the
   interface tracing mode or dump mode.  Examples: I see some
   interface variable in a build item's Abuild.interface file and want
   to know who uses it, or I see some variable in someone's
   Abuild-ant.properties or Abuild.mk and want to know who defines it.

 * Consider useing re-entrant scanners instead of C++ scanners.  This
   requires flex >= 2.5.33.  Have abuild's own build process detect
   whether or not a new enough version of flex is available.  If so,
   it should generate the parsers and attempt to update a cached copy
   of the automatically generated files if they have changed.
   Otherwise, it should use the cached files by adding them to SRCS in
   place of the automatically generated ones.  We also need to disable
   warnings for the flex-generated code.  Use %option nounistd.

 * Test, at least informally, backing areas on different drive letters
   on Windows.  Not sure whether it's worth putting this in the test
   suite.

 * It would be nice if there were a mechanism for providing
   documentation on traits so that --list-traits could tell the user
   how each trait was intended to be used.

 * Consider capturing the output of the backend so that we can
   de-interleave output when running parallel builds, separate error
   from informational output, etc.  It is possible to create pipe-like
   handles with CreatePipe in Windows and to use them to initialize
   hStdInput, hStdOutput, and hStdError fields of the startupinfo
   parameter to CreateProcess.  There is an example at
   http://lists.trolltech.com/qt-interest/1999-09/thread00282-0.html
   There is also some kind of Win32 Job API used by the perl
   Win32::Job classes (CreateJobObject).  This may provide a better
   solution than our current CTRL-C handling.

 * Clean up ~/source/examples/java/native/abuild and use as JNI
   example

 * ccxx: Consider enforcing that no object file may appear both as a
   program and a library object file and that no object file may be
   generated from more than one source file (with different suffixes)

 * Consider converting abuild_data.dtd to a schema for tighter
   validation (which attributes are allowed in which contexts).
   Search for DTD in the documentation and test suite.

 * It would be nice if we could use higher resolution figures for the
   PDF than for the HTML.  There is plenty of material in the
   sagehill.net DocBook XSL guide about this.

 * We really need a way to be able to use autoconf to find out
   information about a specific compiler.  This would be especially
   useful for figuring out what flags to use for PIC when building
   shared libraries.

 * Orphan target detection won't find orphan targets in
   subdirectories.  This is very hard to fix in general.  We could
   search directories represented in the source lists, but that
   wouldn't help if we removed the last file from a subdirectory.  For
   now, we'll just not handle this case.

 * There are some Windows path issues.  Find out the real story behind
   Windows paths.  See whether using absolute paths is better than
   relative paths for Windows.  If so, this has implications as there
   is a mixture of Windows native and cygwin tools in use.

 * Right now, list_platforms has no way to get native os, cpu, or
   toolset data.  See comment in Abuild::loadPlatformData before
   invocation of list_platforms.

 * It would be nice if we could have a flag that would tell abuild to
   capture and de-interleave the output from multiple backends in
   parallel.  See Abuild::invokeBackend.

 * make-binary-distribution probably doesn't work correctly with
   respect to copying msvc DLLs in .NET 2005.  We might need a better
   way to do this.  Ideally, we should be using something like
   nullsoft to create a Windows self-installer.

 * Mingw support isn't that complete: see known limitations in the
   documentation and comments in private/list_platforms.  If it is
   improved, consider improving support for recognizing it so that the
   user doesn't have to set MINGW=1.  Search for mingw in the
   documentation and adjust as needed.

 * Consider adding a trouble shooting section to the documentation,
   web site, or wiki

    - example: library name inconsistency between Abuild.mk and
      Abuild.interface

 * Cass Dalton reports that he sometimes gets "resource busy" errors
   when running autoconf with --make-jobs.
