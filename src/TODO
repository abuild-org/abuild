
Version 1.1
===========

General
-------

 * Replace "this" with "item-name".  Give a warning if "this" is
   encountered unless running in explicit 1.0 compatibility mode.

 * Redo backing areas and externals.  See "Revamped Build Tree
   Structure" below.

 * It would be nice if -p native:skip didn't actually disable native
   platforms but instead just took them out of the default build list.
   That way, when doing -p native:skip, if a java or indep build item
   depends on a native build item, abuild can still build the native
   item "as needed" just as it would for other platform-specific
   dependencies.  While we're at it, it should be possible to disable
   java and indep build items in this same way, and maybe also to
   specify indep-only or java-only.

 * Remove temporary ABUILD_FORCE_32BIT hack.  Search for FORCE32 in
   the code.  The only references are in
   private/bin/get_native_platform_data and make/toolchains/gcc.mk.
   For a description, see release notes in the documentation.

 * Inheritable or Global plugins.  It would be nice if we could
   declare a plugin as automatically inheriting across externals.
   This should be possible with the revamped build tree structure.

 * Need a better solution for automatically generated files that might
   be controlled in some cases to work around lack of tool support.
   Abuild itself could use this for flex/bison files.  We could also
   use it for cases like xbinder where generating the files requires a
   special license.  We need a clean way to handle the following:

    - Regeneration of the files if they are out of date and the tools
      are available.

    - Use of cached files if they are not out of date.

    - Error if the files are out of date and the tools are not
      available.

   This implies, at least for these cases, some kind of checksum-based
   method (rather than using modification times) to tell whether files
   are out of date.  That way, checkouts from the version control
   system can work without modification time preservation.

 * Consider creating a ./configure that finds boost libraries and
   deals properly with pthread.  Then consider packaging auto-srcs
   with abuild sources.  Check on debian to see if this works with the
   latest flex.  Consider making the re-entrant scanner switch, made
   possible by controlling the flex and bison files provided that
   there is an autoconf check for the right versions of flex and
   bison.  See ~/source/work-software/argon/third-party-support/boost
   for sample boost autoconf code.

 * Consider a "renamed-to" or "replaced-by" keyword that would be used
   to indicate that a build item has been replaced by another build
   item.  Its semantics would include that BUILD_ITEM_RULES and
   abuild.hook-build-items would follow the name change.  This is
   stronger than using deps to make the old name depend on the new
   name.

 * When topologically sorting build items based on dependency, instead
   of starting with a straight alphabetical list of build items, first
   group build items together by tree using a topologically sorted
   alphabetical list of trees.  This should result in build items from
   the same tree being built together (in a single-threaded build).


Revamped Build Tree Structure
-----------------------------

A principal failing in abuild 1.0 stems from the use of paths to
specify the locations of external build trees -- "external-dirs" is
used to convey both dependency and location information.  A serious
and related problem is the interaction between backing areas and
externals.

Projects that desire certain parts of their trees to be potentially
compile-time independent from other parts have to break things into
multiple trees and use externals.  This sometimes results in build
areas consisting of many more trees than I envisioned in my original
design.

Consider first the case of externals without backing areas.  If there
are multiple build trees with complex "external" relationships between
them, then there is an implicit build "forest" consisting of multiple
build trees which must be organized relative to each other in a
particular way.  Knowledge of this relative organization of trees is
not represented in any one place but rather is distributed through all
the root Abuild.conf files.  For example, if A, B, C, and D are build
trees whose roots are under a common parent, you could have a
situation in which A declares ../B and ../C as externals and B
declares ../D as an external.  There is no single place where A, B, C,
and D are even all mentioned, yet abuild will require them to all be
in the same directory.  This situation becomes much worse when build
trees are at different levels -- the same tree may be referred to by
multiple different relative paths.  This creates great confusion, and
makes it very to move a tree around or even find who is referencing a
particular tree.  When backing areas are added to the mix, the problem
is further compounded.  If a build tree contains other external build
trees nested inside of it, use of a backing area with the parent tree,
in practice, requires use of a specific backing area on the child
tree, especially when externals need to be resolved from a backing
area.  Consider this arrangement of build trees:

   A       F
 / | \    /
B  C  D  G
|
E

with the following external relationships:

E -> C, D
D -> G

Suppose you have a backing area forest containing A and F, and a local
build area containing only A.  In this case, in the local A, it is
necessary to have backing areas for E, C, and D in, and they all have
to point to the right locations in A'.

It is clear that build trees deserve to be named entities, and that
just as is true with build items, the location of any given tree must
appear in only one place within a build area.  It is also clear that
use of backing areas when multiple trees are involved is too
cumbersome to be practical.

A better traversal system is required in order to make abuild aware of
all the possible build trees and their locations.  The following other
problems must be addressable by this:

 * When breaking off a part of a tree into an external for isolation,
   plugin declarations have to be duplicated

 * It is impossible to pass information, such as extra compilers or
   flags, backwards across the external gap, so if you use a
   collection of common build items (like tps-build-items), there's no
   way to get those items to compile using your own compiler.  This
   applies also to test suite build items that are separate trees
   nested within the tree that provides the items they are testing.
   (tests for boost, xbinder, etc.).  This should be addressed by the
   global plugin concept.

 * If it is desired to build one portion of a build area without
   having other portions build, there needs to be a mechanism for
   abuild to treat certain trees as read-only for the duration of the
   build, but this information should probably not be encoded into the
   Abuild.conf files.  Consider:

         A
       / | \
      B  C  D

   If B and D both have C as an external and are independent from each
   other, you might want to build C first and then have both B and D
   built in parallel while treating C as read only.  Maybe we can
   specify one or more read-write or read-only roots on the
   command-line.  If none are specified, all externals are read-write.
   If read-only roots are specified, all externals are read-write
   except for those explicitly listed as read-only.  If any read-write
   roots are specified, all externals are read-only except those
   specified as read-write.  It is an error to specify both.

 * It would be nice to be able to build everything from a single build
   even if there is no single build item that can see all the build
   trees.  In the above example, there may be no single place from
   which B, C, and D are all known, but it would still be nice to be
   abuild to do a build that includes all the trees, even if B and D
   have duplicated names in them.

 * Name disambiguation would be nice across build trees.  Named trees
   allows fully qualified build items of the form tree::name.  If
   build item A includes X and Y with X -> Y and build tree B shows up
   with its own Y, a reference to Y from within A should resolve to
   A's Y.  If there is a desire to reach a Y in tree B, A can refer to
   B::Y.  Need to think about how this interacts with name-based
   access control, but it will probably interact fine.

 * It would be good if errors in a part of the collection of build
   trees that are not relevant to you don't impact your build.  For
   example, a build of B above should not fail or even necessarily
   tell you if there are errors in D.  Perhaps we can figure out which
   trees are touched in a build set and disregard errors in untouched
   trees unless --full-integrity is specified.

Proposed Solution:

Introduce this file system hierarchy restriction:

 * All build items in a local collection of build trees must be
   located physically under the root of the topmost build tree.

Imposing this restriction makes it possible to eliminate the
parent-dir key.  Enforcing this restriction involves verifying that
child-dirs may not contain .. in any path element, and that there are
no intervening Abuild.conf files between a parent and child
Abuild.conf.

This also implies elimination of absolute path externals, and makes it
impossible to have multiple roots without a common parent directory.
Hopefully this isn't too strict, but imposing it simplifies things a
lot and doesn't actually significantly change the state of practice.
Splitting builds across disks is already impractical, and with
junction points and loopback mounts, there are ways around it anyway.

Introduce the concept of a "build forest", which is a local collection
of build trees that are all found beneath some common ancestor
directory.

Abuild.backing files may appear only at forest roots.

Require build tree roots to include a "tree-name" key which provides
the name of the build tree.  Any Abuild.conf file may contain a
tree-name key.  This makes it the root of a subtree, which functions
very much as externals do in abuild 1.0.

Replace "external-dirs" with "trees-used" which takes a list of tree
names rather than tree paths.  Since we have no longer have the
concept of externals, we no longer have the concept of read-only
externals.  To support the pattern of building a tree without building
any of the other subtrees that it uses, we add another mechanism such
as declaration of one or more read-only or read-write root directories
outside of which all build trees are to be treated as read-only.

Traits and supported flags inherit through trees-used just as they did
through externals in 1.0.  Plugins do not inherit through trees-used
just as they did not inherit through externals in 1.0.  Plugins do
interact with subtrees though.  By default, if a subtree does not
specify any plugin information, it inherits plugins from its parent.
A subtree may replace plugins from its parents by having its own
plugins keyword.  It may also add to plugins with plugins-add or
remove from plugins with plugins-remove.

Consider changes to Abuild.backing:

  path: /path/to/backing/area
  deleted-trees: trees not to shadow
  deleted-items: items not to shadow (fully qualified as tree-name::item-name)

Consider removing deleted-items from Abuild.conf.


Example:

  OLD:

   Top-level Abuild.conf files in each leaf below; no way to know of
   all build trees or their relative positions without visiting each
   root.  No way to get list of build tree roots other than exhaustive
   search.

   /-- common
   |
   |-- proj1
   |   |
   |   |-- interface
   |   |   |
   |   |   |-- comp1    external-dirs: ../../../common
   |   |   |
   |   |   `-- comp2    external-dirs: ../../../common
   |   |
   |   `-- private
   |       |
   |       |-- comp1    external-dirs: ../../interface/comp1
   |       |
   |       `-- comp2    external-dirs: ../../interface/comp2 ../comp1
   |
   `-- proj2
       |
       |-- common       external-dirs: ../../common
       |
       |-- comp1        external-dirs: ../common
       |
       `-- comp2        external-dirs: ../comp1

  NEW:

   Top-level Abuild.conf file in top directory; subtrees are hooked in
   with child-dirs just like any other subdirectory.

   /-- common           tree-name: common
   |
   |-- proj1
   |   |
   |   |-- interface
   |   |   |
   |   |   |-- comp1    tree-name: proj1-comp1; trees-used: common
   |   |   |
   |   |   `-- comp2    tree-name: proj1-comp2; trees-used: common
   |   |
   |   `-- private
   |       |
   |       |-- comp1    tree-name: proj1-comp1-impl; trees-used: proj1-comp1
   |       |
   |       `-- comp2    tree-name: proj1-comp2-impl;
   |                    trees-used: proj1-comp2 proj1-comp1
   `-- proj2
       |
       |-- common       tree-name: proj2-common; trees-used: common
       |
       |-- comp1        tree-name: proj2-comp1; trees-used: proj2-common
       |
       `-- comp2        tree-name: proj2-comp2; trees-used: proj2-comp1



Traversal algorithm:

 * Find the root of the current build forest.

   cur_build_item = this directory
   forest_top = nil

   do until no more Abuild.conf files
     if cur_build_item's Abuild.conf contains tree-name key
        forest_top = cur_build_item
     parent_build_item = next higher Abuild.conf
     if parent_build_item exists and has child pointing to cur_build_item
        cur_build_item = parent_build_item
     else
        if forest_top == cur_build_item
           okay; found
        else
           forest_top = nil
           error: unable to find top of build forest

   Note that if a parent Abuild.conf is found but it doesn't have a
   child-dirs key that points to the child build item and if the child
   build item is a build tree root, the search stops, and there is no
   error or warning reported.  This is a normal case of a separate,
   independent tree nested inside another tree.  Examples of when you
   might have this would include test suites that create build trees
   (such as abuild's own test suite) or instances in which abuild may
   be used to build third-party software distributions nested within
   something that contains Abuild.conf files.  If this tree was
   supposed to be connected into higher trees and was not, there will
   probably be unresolved trees-used or deps values.

 * If the root of the forest does not contain an Abuild.backing, then
   this is an unbacked forest.  If it does contain an Abuild.backing
   file, ensure that it points to a tree root (not necessarily a
   forest root).  In that case, search for the backing tree's forest
   root.  Continue until an unbacked forest is found.  Traverse the
   unbacked forest (as described below).

   Note that we impose no restrictions on whether the backing area
   points to the same tree or even to a backing forest that contains
   the same tree.  This makes it possible to add an entirely new
   subtree in a work area that backs to some other area, and then to
   have the backing area later get included inside of a higher-level
   tree without impacting the work area.

 * Traverse the build forest.

     traverse:

     if current item has a tree-name key
        set cur_tree to name of tree
     store current build item in cur_tree
     for each dir in child-dirs
        ensure that dir has no path elements equal to ".."
        if dir has more than one path element
           ensure that no intermediate directories have Abuild.conf
        traverse recursively from dir

 * Verify that each tree in the forest is uniquely named

 * Copy build items from the backing area forest that are absent from
   the local forest into the local list.  Exclude build items that are
   listed as deleted or that belong to trees that are listed as
   deleted in the Abuild.backing file.

 * Make sure that the graph implied by the trees-used key is an
   error-free directed acyclic graph.  Do not do checks to ensure that
   is bipartite with respect to backing area traversal; save this
   check for the build item level.  This makes it possible to sparsely
   shadow a build tree for the purpose of adding items to it.

 * Check dependencies and build item references for the whole forest
   rather than doing it separately for each build item and copying
   build items around.  (We only copy build items from backing areas,
   not subtrees.)  Just disallow resolution of any build item name in
   a tree not declared as used.  This makes it possible to issue error
   messages akin to "A is not allowed to depend on B since A-tree has
   not declared B-tree as in its tree-used key."

(Test case: staggered build items or subtrees: with A/B/C/D/E, have
A -> B, C; B -> C/D; C -> D/E.  Should generate an error.)

Figure out how to make global plugins work with this and what
restrictions, if any, should be imposed on them (like maybe they're
not allowed to have interfaces or rules but are just allowed to be
platform type or compiler plugins).  Shouldn't be that hard.

Need to flesh out an example that includes both searchlight and
lh3-style trees.  Think about external build item library concept,
whether it's sensible, and how it interacts with global plugins.  Also
consider the case of nested build trees with externals that point up
such as in the test suites of some of the plugins.


Detect whether to use the version 1.0 or version 1.1 traversal
algorithm.  Consider a flag to turn this on or off.  Maybe it should
be off by default.  Probably want to be able to choose 1.1, 1.0, or
auto with default being 1.1 or auto.

 * If build item has an item-name key, use 1.1

 * If build item has a parent-dir key, use 1.0

 * Else if build item has a tree-name or trees-used key, use 1.1

 * Else if build item has any keys that are allowed in build tree
   roots or has an Abuild.backing file, use 1.0

 * Else if build item has a child-dirs key and child build item has a
   parent-dir key, use 1.0

 * Else could be single-build-item 1.0 tree or normal case 1.1 build
   item.  If parent exists by 1.1 algorithm, use 1.1.  Otherwise, give
   a warning and proceed to treat as a single build-item 1.0 tree.



Java
----

 * Ant launcher: consider having a Java-based ant launcher that abuild
   communicates with via some kind of IPC to make launching ant more
   efficient.  See ~/argon/tmp/ant-launcher and email X-ArgonCount:
   23536 in abuild, 4/3/2008, subject "preliminary ant launcher
   experiment".

Compiler/Platform Configuration
-------------------------------

There is a general problem with compiler options, 32-bit and 64-bit
compilers, project-specific configuration, supporting compilers that
aren't known in advance, etc.  This is kind of what toolset was
designed to handle.  The following items are possibly contradictory or
interdependent and need to be sorted out better.

 * Need a more flexible way of handling compiler options.  It should
   be possible to create plugins that add compiler options to
   internally supported compilers, and options should be able to be
   meaningfully selected in groups.  For example, it should be
   possible to add {m32, m64} that can't be specified together and
   {debug, release} that can't be specified together while allowing
   debug+m32 or release+m64 or other permutations.  This implies the
   need for a canonical form.

 * We need some way for people to change the toolset portion of the
   platform string in a global way for a particular collection of
   build tres.

 * There needs to be some kind of "site" configuration that lives in a
   build tree that may be at the base of the externals chain.  This
   should be like a plugin but we need the ability to support some
   kind of build/configuration.  For example, it should be possible to
   generate toolsets or change default compiler options based on the
   output of ./configure or to set things that are specific to which
   compiler is used.

 * It would be nice to have some way to support libtool and a generic
   UNIX compiler such that if you could specify it with ./configure,
   you could build using abuild with it.  This may figure into the
   site configuration somehow.  Ultimately, it should be possible for
   a given project to be configured such that its build trees build
   with a particular compiler and particular options, and this should
   be possible to do without modifying abuild or requiring every
   single build tree to take some specific actions.

 * There needs to be better cross-compiler support for things like
   building 32-bit code on a 64-bit system.  Adding -m32 doesn't
   really do it because why should have you
   linux.x86_64.rhel51.gcc.m32 be the same as linux.ix86.rhel51.gcc?


Platform Conditionals
=====================

People want conditional dependencies, but mainly for platform issues.
Consider one or both of the following ideas:

 * Platform restrictions per build item.  If a build item has a
   platform restriction, it will be excluded from the initial build
   set construction.  Then what happens if it get pulled in to satisfy
   a dependency?  This should be an error, but that causes problems in
   some cases.  See next idea for a possible solution.

 * Sometimes we use dependencies just to force something to build, as
   in the case of the "compile-all" item in searchlight or some
   "top-level" builds.  We really need the concept of a "build-also"
   keyword that specifies build items that should be built if this one
   is built.  It effectively just adds them to the build set.  The
   build-also keyword doesn't have any restrictions about cycles -- it
   is just used during inital build set construction.  As such, it can
   have platform-based conditionals.

Using these two features together, it should be possible to achieve
the goal of supporting platform-based conditional dependencies in a
safe manner.


Java Problems
=============

We probably need a different approach to Java.  Ant was not designed
to be used as a framework, and it doesn't work very well when used in
this way.

 * In order to get wars in ear files, we need to add them to
   abuild.classpath.  Although this is harmless, it's sort of an abuse
   of abuild.classpath.

 * We don't detect when inaccessible build items are referenced in
   abuild.hook-build-items

 * Abuild has no real way to support a difference between compile-time
   classpaths and run-time classpaths.

 * NOTE: It was necessary to create /usr/{share,lib}/java-1.6.0 in
   order for build-classpath from jpackage to do the right thing when
   launching ant 1.7.0 in fedora core 5.  Not sure how general of a
   problem this is.

 * Reconsider using depends task for compile in abuild.xml.

 * Signed jar support will eventually be required.

 * Our default java compile rule doesn't notice if a .java file was
   removed.  Maybe we want to force full recompilation if the list of
   files changed, or maybe we want to delete class files that appear
   to have come from non-existent java files.  I'm not sure what
   happens with nested/inner classes that disappeared....does javac
   automatically remove the corresponding class files?  This would be
   an easy experiment to try.

 * Consider supporting creation of multiple jar files with different
   contents analogous to different libraries being created from a
   single C++ build item.

 * Ant seems to not complain when populating an ear file from a
   classpath that contains non-existent items.  In general, there may
   be an issue with not getting any notification of non-existent
   classpath items.

 * We use the privately set "debug" and "deprecation" properties in
   abuild.xml to set debug and deprecation.  These should really be set
   using documented abuild properties, and we should figure out what
   other similar properties we might want to set in this way.

 * There is presently no mechanism for adding a new build target that
   is visible to all build items (as one can do with plugin.mk in
   make-based builds).  Figure out again why we can't add a custom
   target in ant code that is loaded as a plugin or hook build item.
   Was there a reason we didn't use import?

   I think the reason is this: with make, if two different build items
   define the same target, if at least one uses a : target instead of
   a :: target, it's an error.  Otherwise, all the variants of the
   target get run.  With ant, there is no such facility.  All but one
   of the definitions of the target will get mangled to
   project.target, and there's no way to run all of the
   implementations.  The only way to get this behavior right now is to
   use hooks.

 * You have to duplicate the archive name (abuild.jar-name, etc.) in
   the Abuild.interface file.


Issues, Enhancement Ideas
=========================

See also "Known Limitations" in the documentation.

 * ant with build failure appears not to exit abnormally in Windows.
   This is a bug in ant.bat and could be worked around by using our
   own ant launcher.

 * gen_deps: rewrite so that it doesn't force a runtime dependency on
   perl.  It should be a fallback for cases when compilers can't
   generate dependency information.  With gcc, use -MD -MF -MP to
   generate proper .dep files.  xlc: "-M -MF a.dep" works, but there
   is no equivalent to -MP, so we'll need to postprocess.  VC:
   there seems to be a /showIncludes option that we may be able to
   exploit.  Not sure what versions of VC++ have this.

 * Test qtest coverage from abuild test suite

 * Think about implementing a dependency analyzer that would look at
   first-level includes to figure out what the correct list of direct
   dependencies should be.

 * Consider having --silent invoke make with --no-print-directory.  If
   we do this, we should follow build item failure with a message that
   contains the name, path, and platform of whatever failed.

 * Consider having an abuild template generator that can run if no
   Abuild.conf or other files are present.  This would spit out
   commented template files.  Alternatively, could be a command-line
   wizard or something.

 * Piping ANSI color stuff through ant on Windows doesn't work.  When
   running qtest from ant on Windows, qtest correctly generates the
   ansi color codes, but they don't get displayed right through ant,
   at least in cygwin.

 * To check for all Abuild.mk files that define local targets:
   pcregrep '^\s*\S+\s*:(\Z|[^=])' **/Abuild.mk

 * It might be useful to have the ability to find all references to a
   particular interface variable and/or to find the origin and
   variable history for a specific variable.  This comes back to the
   interface tracing mode or dump mode.  Examples: I see some
   interface variable in a build item's Abuild.interface file and want
   to know who uses it, or I see some variable in someone's
   Abuild-ant.properties or Abuild.mk and want to know who defines it.

 * Consider useing re-entrant scanners instead of C++ scanners.  This
   requires flex >= 2.5.33.  Have abuild's own build process detect
   whether or not a new enough version of flex is available.  If so,
   it should generate the parsers and attempt to update a cached copy
   of the automatically generated files if they have changed.
   Otherwise, it should use the cached files by adding them to SRCS in
   place of the automatically generated ones.  We also need to disable
   warnings for the flex-generated code.  Use %option nounistd.

 * Test, at least informally, backing areas on different drive letters
   on Windows.  Not sure whether it's worth putting this in the test
   suite.

 * It would be nice if there were a mechanism for providing
   documentation on traits so that --list-traits could tell the user
   how each trait was intended to be used.

 * Consider capturing the output of the backend so that we can
   de-interleave output when running parallel builds, separate error
   from informational output, etc.  It is possible to create pipe-like
   handles with CreatePipe in Windows and to use them to initialize
   hStdInput, hStdOutput, and hStdError fields of the startupinfo
   parameter to CreateProcess.  There is an example at
   http://lists.trolltech.com/qt-interest/1999-09/thread00282-0.html
   There is also some kind of Win32 Job API used by the perl
   Win32::Job classes (CreateJobObject).  This may provide a better
   solution than our current CTRL-C handling.

 * Clean up ~/source/examples/java/native/abuild and use as JNI
   example

 * ccxx: Consider enforcing that no object file may appear both as a
   program and a library object file and that no object file may be
   generated from more than one source file (with different suffixes)

 * Consider converting abuild_data.dtd to a schema for tighter
   validation (which attributes are allowed in which contexts).
   Search for DTD in the documentation and test suite.

 * It would be nice if we could use higher resolution figures for the
   PDF than for the HTML.  There is plenty of material in the
   sagehill.net DocBook XSL guide about this.

 * We really need a way to be able to use autoconf to find out
   information about a specific compiler.  This would be especially
   useful for figuring out what flags to use for PIC when building
   shared libraries.

 * Orphan target detection won't find orphan targets in
   subdirectories.  This is very hard to fix in general.  We could
   search directories represented in the source lists, but that
   wouldn't help if we removed the last file from a subdirectory.  For
   now, we'll just not handle this case.

 * There are some Windows path issues.  Find out the real story behind
   Windows paths.  See whether using absolute paths is better than
   relative paths for Windows.  If so, this has implications as there
   is a mixture of Windows native and cygwin tools in use.

 * Right now, list_platforms has no way to get native os, cpu, or
   toolset data.  See comment in Abuild::loadPlatformData before
   invocation of list_platforms.

 * It would be nice if we could have a flag that would tell abuild to
   capture and de-interleave the output from multiple backends in
   parallel.  See Abuild::invokeBackend.

 * Mingw support isn't that complete: see known limitations in the
   documentation and comments in private/list_platforms.  If it is
   improved, consider improving support for recognizing it so that the
   user doesn't have to set MINGW=1.  Search for mingw in the
   documentation and adjust as needed.

 * Consider adding a trouble shooting section to the documentation,
   web site, or wiki

    - example: library name inconsistency between Abuild.mk and
      Abuild.interface

 * Cass Dalton reports that he sometimes gets "resource busy" errors
   when running autoconf with --make-jobs.

 * Scott Lemke points out that abuild has a lot of knowledge about
   things that are not relevant to any particular build.  One thing to
   consider would be having abuild analyze error conditions to
   determine which ones are not relevant to the local build.  This
   might enable abuild, in some cases, to build a local group of items
   even when there are integrity errors in other parts of the build
   tree.  This may or may not be a desirable feature.

 * It would be nice if plugins could have type indep and could build
   stuff.  It would be nice, for example, to be able to implement a
   compiler plugin that uses autoconf to figure out the correct
   compiler invocation so that it would be possible to support a
   generic unix compiler or libtool from a plugin.
