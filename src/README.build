PREREQUISITES
=============

You must have the following tools at the following versions (or
newer):

  * gnu make 3.81

  * apache ant 1.7

  * antcontrib (from sourceforge.net) 1.0.b3, installed in ant's lib
    directory

  * boost >= 1.33.1 thread and regex libraries

In addition, you must have a working ant with antcontrib in your path
or in a location pointed to by ANT_HOME.  NOTE: If you do not have ant
and java, you can set the environment variable ABUILD_NO_JAVA=1 before
running the test suite.  This will cause all java related tests to
become expected failures.  Skip the abuild --build=all step in the
bootstrapping to avoid trying to build the ant library.  If you obtain
a java environment later, you do not need to recompile abuild.  Just
build the ant library and rerun the test suite without the
ABUILD_NO_JAVA variable set.

If your boost libraries are not installed in the default location, you
may need to set BOOST_INCLUDES and/or BOOST_LIBDIRS to the locations
of the header files and libraries.  If your boost libraries require a
suffix (-lboost_thread-xyz), then you need to set BOOST_LIB_SUFFIX to
the suffix (-xyz).


UNIX BUILD
==========

Abuild may be built with abuild or with gnu make.  To build with gnu
make if no version of abuild is available, run

make -f Makefile.bootstrap


WINDOWS BUILD
=============

To build on Windows, perform the following steps:

 * have Visual C++ environment variables and path set (by running the
   batch file provided with Visual C++)

 * mkdir abuild-windows.ix86.nt5-cygwin.msvc

 * Go to a UNIX system with a working flex and bison and run "abuild
   save-auto".  [Note: as of 1.0.a15, this doesn't work in a
   non-updated Fedora 7 because of a bug in Fedora's local
   modification to flex.  Fedora has acknowledged and fixed this bug.
   Flex 2.5.33-8 or better is required.  A yum install flex will bring
   in at least this version.]

 * Copy the files in the auto-srcs directory from there into your
   local abuild-windows.ix86.nt5-cygwin.msvc directory and then delete
   the auto-srcs directory.

 * Follow UNIX build instructions above.


COMMON
======

Once built, run "abuild --build=all" in the current directory to build
other pieces of abuild.  See manual/README for additional requirements
for building the documentation.  If you don't want to build the
documentation but still want to build the Java portion of abuild, run
"abuild -C ant-library".


CREATION OF SOURCE RELEASE
==========================

Do a clean export of abuild from the version control system.  Rename
abuild to abuild-version.  Create abuild-version.tar.bz2 (and/or
abuild-version.tar.gz) containing that directory.


INSTALLATION/CREATION OF BINARY RELEASE
=======================================

Use the make-binary-distribution script to create a binary release.
Run make-binary-distribution with no arguments and check the comments
at the top of the file for details.

To run abuild's test suite, you must have qtest-driver in your path.
Note that you are likely to get some test failures on "make sure all
files were read" tests if you run the test suite over a network file
system.  make-binary-distribution will not allow you to create a
release if there are any test failures.

Basic steps:

 * Extract a clean source tree

 * create abuild-version.tar.bz2 as the source distribution; do not
   delete the source yet

 * copy make-binary-distribution into the same directory as the source
   distribution

 * delete the source directory

 * run

 ./make-binary-distribution abuild-version.tar.bz2 --make-java-dist \
       --make-doc-dist --make-static --save-auto

 * save the binary distribution or distributions

 * Distribute the auto-srcs directory, source distribution, java
   distribution, and doc distribution, and make-binary-distribution as
   needed to the build hosts

 * For each build host, run make-binary-distribution on each build
   host.  Pass the doc-dist and/or java-dist files as arguments as
   needed.

 * If this is an official release, remember to update the
   web-accessible copies of the documentation and create a tag in the
   version control system.
