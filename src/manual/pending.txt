
Upgrading Build Trees from 1.0 to 1.1
=====================================

Abuild can help you with the process of upgrading your build trees
from 1.0 format to 1.1 format.  This chapter describes how to use
abuild to help you perform these updates.

Outline
-------

Here is an outline of the basic process:

 * cd to a directory that is above all your build trees and that you
   wish to use as the new "forest root".

 * run "abuild --upgrade-trees"

 * abuild --upgrade-trees will analyze all Abuild.conf files and
   generate a file called "abuild.upgrade-data" that you will have to
   edit.  Edit the file as described in this document.

 * Rerun "abuild --upgrade-trees".  Once abuild has all the
   information it needs, it will perform the upgrade by rewriting any
   Abuild.conf or Abuild.backing that needs to be rewritten.  The
   original file will be renamed to Abuild.conf-1_0 or
   Abuild.backing-1_0.  When you are satisfied with the upgrade, you
   can delete the *-1_0 files, as those files are not used by abuild
   under any circumstance.

Generally, if you have a backing area, you should upgrade the backing
area first.  If your backing areas are set up properly and you have
not added any new trees in your area, the upgrade of the backing area
may work without any intervention, as abuild will use the backing area
to figure out tree names for trees that are backed.


Information You Will Need
-------------------------

Among the most significant changes to abuild for version 1.1 is the
requirement that all build trees have names.  In order for abuild to
upgrade your trees from version 1.0 to version 1.1, it will need to
know what name you wish to assign to all your build trees.  You will
use the "abuild.upgrade-data" file to provide this information to
abuild.  Once it has all the required information, abuild will insert
the "tree-name" key into the root Abuild.conf file of every tree, and
it will replace any "external-dirs" keys with "tree-deps" keys.  It
will also remove "parent-dir" keys, replace "this" with "name",
upgrade "Abuild.backing" files, and move any occurrences of "deleted"
from root "Abuild.conf" files into the forest-wide "Abuild.backing"
file.

The "abuild.upgrade-data" File Format
-------------------------------------

QUICK START

 * For each directory whose contents you wish to (recursively) ignore,
   place the directory in the [ignored-directories] section.  Place
   one directory per line, and specify directories relative to the one
   containing this file.

 * For each detected build tree root below, replace '***' with the
   name you intend to give the tree.

 * Rerun abuild --upgrade-data

DETAILS

This is a configuration file used to assist abuild --upgrade-trees.
Every time abuild --upgrade-trees is run, it will replace this file,
so any comments or formatting changes you make will be lost.  Any
tree names you assign will be preserved.

The abuild.upgrade-data file consists of sections Each section is
opened with a line of the form

[section-name]

where "section-name" is replaced by one of the valid section names.

There are three sections: one [ignored-directories] lists directories
that will be skipped during the upgrade, any number of [forest]
sections list all the trees abuild finds to be in a given forest, and
an optional [orphan-trees] section is used to hang onto names
previously assigned to any trees that no longer appear in a known
forest.

The "abuild --upgrade-trees" command recursively scans the current
directory looking for Abuild.conf files.  It reads every Abuild.conf
file that it can find and analyzes them to determine what build trees
are available.  Based on the relationships it detects among the build
trees by looking at each tree's external-dirs entry, it creates a list
of possible forests.  Each forest is a group of build trees that refer
to each other in some way.  The list of forests is generated such that
no tree in one forest refers to any tree in another forest through any
of its items' Abuild.conf files.  In other words, all forests are
expected to be completely independent.  There are several cases in
which you might have multiple forests.  Normal cases could include
self-contained groups of build trees inside of test suites or abuild
setups to build third-party packages or other external software.
There may also be erroneous cases resulting from stray Abuild.conf
files that are not connected to the rest of the trees.  You should
examine the list of forests carefully to determine whether there are
stray files that you wish to remove.

The "abuild --upgrade-trees" functionality fully supports partially
upgraded trees.  It is okay to upgrade forests that have a mixture of
1.0-style and 1.1-style trees in them.  This means you do not have
upgrade your trees all at the same time.

If there are directories below the current directory that you wish to
ignore during the conversion process, list them in the
[ignored-directories] section.

In each forest that abuild discovers, it will require a name for each
tree.  If the tree already has a name, that name will appear filled in
below.  Otherwise, the place-holder '***' will appear.

In some cases, there may be a tree that you are not ready to upgrade,
perhaps because that tree is still being used by a project that hasn't
yet upgraded its version of abuild.  In that case, you may list the
path to the root of the tree in the [ignored-directories] section.
You do not need to remove it from the [forest] section in which it
appears; abuild will remove it from there automatically next time it
writes the file.

Abuild is able to perform the actual upgrade when all of the following
conditions are met:

 * Abuild is able to parse all Abuild.conf files at or below the
   current directory, excluding any ignored directories, without
   finding any errors.

 * Every external-dirs entry exists (or can be resolved through a
   backing area).

 * Every tree root listed in a given [forest] section has a name
   assigned to it.

 * Every tree that abuild finds during its scan as well as every
   external-dirs entry referenced by those trees appears in a [forest]
   section and has a name assigned to it.

Abuild is usually able to upgrade forests with backing areas, but it
will not do so if any externals resolve to 1.0-style trees in backing
areas.  In that case, you must either upgrade the backing area or make
the external resolve locally.  You can make the external local by just
creating a directory and populating it with an Abuild.conf and an
Abuild.backing.  The reason for this restriction is that abuild will
not read the Abuild.backing file of an upgraded tree root that is not
at the root of a forest.  This means that abuild would no longer be
able to resolve the external in the backing area.  Generally, when
possible, it is best to upgrade your backing area first anyway since
upgrades to forests with upgraded backing areas often require no
manual intervention.
