#!/usr/bin/env perl

require 5.008;
BEGIN { $^W = 1; }
use strict;

require TestDriver;
require abuild_test_utils;

chdir("abuild-ant") or die;

my $td = new TestDriver("ant framework");
test_setup();

my $top = get_top();
my $filters = get_filters();
my ($test_java, $test_junit, $jar, $java) = @{get_java_information()};
if (! $test_java)
{
    $td->notify("skipping ant tests");
    $td->report(0);
    exit 0;
}

# This test suite tests the ant framework.

setup($td);

cd("work/java");

my $java_cygwin = ($^O eq 'cygwin');

if ($java_cygwin)
{
    # Test to make sure a java build will work if we don't have perl.
    my $opath = $ENV{'PATH'};
    my @path = ();
    foreach my $p (split(':', $opath))
    {
	if ((-e "$p/perl") || (-e "$p/perl.exe") ||
	    (-e "$p/uname") || (-e "$p/uname.exe"))
	{
	    # exclude from path
	}
	else
	{
	    push(@path, $p);
	}
    }
    $ENV{'PATH'} = join(':', @path);
    system("abuild --build=all > abuild-java.out 2>&1");
    $ENV{'PATH'} = $opath;
    $td->runtest("build java without perl in path",
		 {$td->FILE => "abuild-java.out",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/java-no-perl.out"},
		 $td->NORMALIZE_NEWLINES);

    # Access the unused Abuild.mk
    system("cat native/Abuild.mk > /dev/null");
}
else
{
    # Make sure these files are accessed.
    system("(tar cf - . | cat > /dev/null)");
}

cd("work/ant-qtest");

# Test failing qtest test suite from ant

$td->runtest("failing qtest from ant",
	     {$td->COMMAND => "abuild check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/ant-qtest-failure.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/junit");

if ($test_junit)
{
    $td->runtest("junit with failure",
		 {$td->COMMAND => "abuild -b all test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/junit-failure.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES);

    $td->runtest("junit with failure and -k",
		 {$td->COMMAND => "abuild -k -b all test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/junit-failure-k.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES);

    $td->runtest("junit with no failures",
		 {$td->COMMAND => "abuild -d test -C test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/junit-okay.out",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);
}
else
{
    # Make sure these files are accessed.
    system("(tar cf - . | cat > /dev/null)");
}

cd("work/defines");

$td->runtest("command-line property definition",
	     {$td->COMMAND => ['abuild', 'potato.salad=one two three'],
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/defines.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no-op",
	     {$td->COMMAND => "abuild -n",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/no-op.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no ANT_HOME or JAVA_HOME",
	     {$td->COMMAND => "unset ANT_HOME; unset JAVA_HOME;" .
		  " abuild potato.salad='four five six'",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/defines2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/target-from-hook/user");

$td->runtest("new target with hook",
	     {$td->COMMAND => "abuild hookything",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/new-target.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

$td->report(6 +
	    ($java_cygwin ? 1 : 0) +
	    ($test_junit ? 3 : 0));
