#!/usr/bin/env perl

require 5.008;
BEGIN { $^W = 1; }
use strict;

require TestDriver;
require abuild_test_utils;

chdir("abuild") or die;

my $td = new TestDriver("abuild");
test_setup();

my $top = get_top();
my $abuild_top = get_abuild_top();
my $filters = get_filters();

# XXX only when needed
my ($test_java, $test_junit, $jar, $java) = @{get_java_information()};
my $platform_native = get_native_platform();
my $native_out = get_native_out();

# Test 1 tests normal cases of a simple build tree without any backing
# areas or externals.  It also exercises the ccxx rules.  It is also a
# place where we dump additional random tests, which may include
# backing areas and externals or any other feature, to exercise
# previously detected bugs.

setup($td, "test1");

cd("work/java");

if ($test_java && ($^O eq 'cygwin'))
{
    # Test to make sure a java build will work if we don't have perl.
    my $opath = $ENV{'PATH'};
    my @path = ();
    foreach my $p (split(':', $opath))
    {
	if ((-e "$p/perl") || (-e "$p/perl.exe") ||
	    (-e "$p/uname") || (-e "$p/uname.exe"))
	{
	    # exclude from path
	}
	else
	{
	    push(@path, $p);
	}
    }
    $ENV{'PATH'} = join(':', @path);
    system("abuild --build=all > abuild-java.out 2>&1");
    $ENV{'PATH'} = $opath;
    $td->runtest("build java without perl in path",
		 {$td->FILE => "abuild-java.out",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test1.java-no-perl.out"},
		 $td->NORMALIZE_NEWLINES);

    # Access the unused Abuild.mk
    system("cat native/Abuild.mk > /dev/null");
}
else
{
    $td->runtest("skipping windows-only Java test",
		 {$td->STRING => "1"},
		 {$td->STRING => "1"});
    # Make sure these files are accessed.
    system("(tar cf - . | cat > /dev/null)");
}

cd("work/ant-qtest");

if ($test_java)
{
    # Test failing qtest test suite from ant

    # In Windows, ant.bat does not return with an abnormal exit status
    # when the build fails.  This makes it impossible to tell whether
    # a build failed or not.
    my $xflag = in_windows() ? $td->EXPECT_FAILURE : 0;

    $td->runtest("failing qtest from ant",
		 {$td->COMMAND => "abuild check",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test1.ant-qtest-failure.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES | $xflag);
}
else
{
    $td->runtest("skipping ant-qtest test",
		 {$td->STRING => "1"},
		 {$td->STRING => "1"});
    # Make sure these files are accessed.
    system("(tar cf - . | cat > /dev/null)");
}

cd("work");

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.dumpdata.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("list traits",
	     {$td->COMMAND => "abuild --list-traits"},
	     {$td->FILE => "$top/test1.list-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("unsupported traits",
	     {$td->COMMAND => "abuild --build=all --only-with-traits one,two" .
		  " --related-by-traits three,four"},
	     {$td->FILE => "$top/test1.bad-traits1.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("unsupported traits",
	     {$td->COMMAND => "abuild --clean=all --only-with-traits five,six"},
	     {$td->FILE => "$top/test1.bad-traits2.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("all items",
	     {$td->COMMAND => "abuild --build=local --monitored",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check ca executable",
	     {$td->COMMAND => "c/ca/$native_out/ca"},
	     {$td->STRING => "C1: 1\nC2: 2\nC1: 102\n", $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check cb1 executable",
	     {$td->COMMAND => "c/cb/$native_out/cb1"},
	     {$td->STRING => "C1: 3\n", $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check cb2 executable",
	     {$td->COMMAND => "c/cb/$native_out/cb2"},
	     {$td->STRING => "C1: 4\n", $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check cb3 executable",
	     {$td->COMMAND => "c/cb/$native_out/cb3"},
	     {$td->STRING => "constant: 3\n", $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check cb's moo.quack",
	     {$td->FILE => "c/cb/$native_out/moo.quack"},
	     {$td->STRING => "oink\n"},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check cc's potato salad",
	     {$td->FILE => "c/cc/abuild-indep/potato"},
	     {$td->STRING => "salad\n"},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check a.x",
	     {$td->FILE => "a/ad/abuild-indep/a.x"},
	     {$td->STRING => "This is a w file.\nw -> x\n"},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check a.r",
	     {$td->FILE => "a/aa/$native_out/a.r"},
	     {$td->STRING => "a\nq -> r\n"},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check b.r",
	     {$td->FILE => "a/aa/$native_out/b.r"},
	     {$td->STRING => "b\nq -> r\n"},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check c.r",
	     {$td->FILE => "a/aa/$native_out/d1/c.r"},
	     {$td->STRING => "c\nq -> r\n"},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("check moo",
	     {$td->FILE => "a/aa/$native_out/moo"},
	     {$td->STRING => "a\nq -> r\nb\nq -> r\nc\nq -> r\nlink\n"},
	     $td->NORMALIZE_NEWLINES);

cd("work/c/cb");

$td->runtest("check preprocessor",
	     {$td->COMMAND => "abuild CB1.i CB2.i CB3.i",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.preprocess.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/e/lib/abuild-zz_os.cpu.toolset.echo");

sleep 1;
open(F, ">>lib-lib1") or die;
print F "--append-to-lib1--\n";
close(F);

$td->runtest("modify lib and build bin",
	     {$td->COMMAND => "abuild bin-bin1",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.bin-after-lib.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

sleep 1;
open(F, ">>lib1-src1.lo") or die;
print F "--append-to-lib1-src1--\n";
close(F);

$td->runtest("modify lib obj and build bin",
	     {$td->COMMAND => "abuild bin-bin1",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.bin-after-lib-obj.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean",
	     {$td->COMMAND => "abuild clean",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.e-lib-clean.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check files",
	     {$td->COMMAND => "ls -A"},
	     {$td->STRING => ".abuild\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build bin1 only",
	     {$td->COMMAND => "abuild bin-bin1",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.bin-after-clean.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build bin1 when up to date",
	     {$td->COMMAND => "abuild bin-bin1",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.bin-up-to-date.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/e");

$td->runtest("rebuild e",
	     {$td->COMMAND => "abuild --build=desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.rebuild-e.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/e/bin");

$td->runtest("e.bin with all platforms",
	     {$td->COMMAND => "abuild --with-deps -p all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.e-p-all.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/e/multi");

$td->runtest("e.multi with all platforms",
	     {$td->COMMAND => "abuild --with-deps -p all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.e-multi-p-all.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work");

$td->runtest("empty build set",
	     {$td->COMMAND => "abuild --build=deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.empty-buildset.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa");

$td->runtest("all items when up-to-date",
	     {$td->COMMAND => "abuild --build=local",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allitems1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no echo platform type",
	     {$td->COMMAND => "abuild --build=local -p echo:skip",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allitems3.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no native platform type",
	     {$td->COMMAND => "abuild -b local --platform-selector native:skip",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allitems4.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("empty with no native",
	     {$td->COMMAND => "abuild -C ../../c/ca -p native:skip",
	      $td->FILTER => "perl $filters/filter-abuild.pl | grep -v cygwin"},
	     {$td->FILE => "$top/test1.no-native.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no object-code platform types",
	     {$td->COMMAND => "ABUILD_PLATFORM_SELECTORS=echo:skip" .
		  " abuild -b local --platform-selector native:skip",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allitems5.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no object-code platform types",
	     {$td->COMMAND =>
		  "ABUILD_PLATFORM_SELECTORS='echo:skip native:skip'" .
		  " abuild -b local",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allitems5.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/h");

$td->runtest("cross-platform dependencies",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.allitems.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("skipping native with as-needed selection",
	     {$td->COMMAND => "abuild -b all -p native:skip",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.no-native.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("skipping indep with as-needed selection",
	     {$td->COMMAND => "abuild -b all -p indep:skip",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.no-indep.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("skipping java with as-needed selection",
	     {$td->COMMAND => "abuild -b all -p java:skip",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.no-java.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("skipping java and native",
	     {$td->COMMAND => "abuild -b all -p native:skip -p java:skip",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.no-java-native.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build-also",
	     {$td->COMMAND => "abuild -d -C build-also check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.build-also.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build-also default target",
	     {$td->COMMAND => "abuild -d -C dep-build-also check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.dep-build-also.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("invalid non-object-code selector",
	     {$td->COMMAND => "abuild -b all -p indep:all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.bad-selector.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean",
	     {$td->COMMAND => "abuild -c all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.clean.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.dumpdata.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/h/multipass/a");

$td->runtest("multipass build-also explicit targets",
	     {$td->COMMAND => "abuild -d check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.multipass.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build-also and related-by-traits",
	     {$td->COMMAND => "abuild -d check --related-by-traits trait",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.build-also-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/h/multipass");

$td->runtest("build-also and only-with-traits",
	     {$td->COMMAND => "abuild -b all check --only-with-traits trait",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.only-with-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean",
	     {$td->COMMAND => "abuild -c all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.h.multipass-clean.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

validate_dump_data($td);

cd("work/ext");

$td->runtest("all items from external",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allitems2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("named items",
	     {$td->COMMAND => "abuild --build=name:aa,cb check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.names-check.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("pattern items",
	     {$td->COMMAND => "abuild --build=pattern:a. check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.pattern-check.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("bad named items",
	     {$td->COMMAND => "abuild --build=name:aa,quack check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.bad-names.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("bad pattern",
	     {$td->COMMAND => "abuild --build=pattern:C++ check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.bad-pattern.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/$native_out");

$td->runtest("check moo existence",
	     {$td->STRING => (-f "moo" ? "yes" : "no"),},
	     {$td->STRING => "yes"});

$td->runtest("clean in platform directory",
	     {$td->COMMAND => "abuild clean",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean-backend.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check moo nonexistence",
	     {$td->STRING => (-f "moo" ? "yes" : "no"),},
	     {$td->STRING => "no"});

cd("work/e/multi");

$td->runtest("invalid clean platforms",
	     {$td->COMMAND => "abuild -c current --clean-platforms '*{'",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.bad-clean-platforms.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean platforms 1",
	     {$td->COMMAND =>
		  "abuild -c current --clean-platforms '*.echo{,.*}'",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean-platforms-1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean platforms 2",
	     {$td->COMMAND => "abuild clean" .
		  " --clean-platforms '*.release' --clean-platforms '*.debug'",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean-platforms-2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean e.multi",
	     {$td->COMMAND => "abuild -c current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.e-multi-clean.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa");

$td->runtest("clean in platform directory with -C",
	     {$td->COMMAND => "abuild -C $native_out clean",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean-backend.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build set in platform directory with -C",
	     {$td->COMMAND => "abuild -C $native_out -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.buildset-platform-directory.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check .abuild existence",
	     {$td->STRING => (-f "$native_out/.abuild" ? "yes" : "no"),},
	     {$td->STRING => "yes"});

$td->runtest("clean",
	     {$td->COMMAND => "abuild clean",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check .abuild nonexistence",
	     {$td->STRING => (-f "$native_out/.abuild" ? "yes" : "no"),},
	     {$td->STRING => "no"});

$td->runtest("clean current",
	     {$td->COMMAND => "abuild --clean=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.depclean0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean dependencies",
	     {$td->COMMAND => "abuild --clean=deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.depclean1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean current with dependencies",
	     {$td->COMMAND => "abuild --apply-targets-to-deps --clean=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.depclean2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/..");

$td->runtest("again with -C",
	     {$td->COMMAND => "abuild --apply-targets-to-deps --clean=current" .
		  " -C work/a/aa",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.depclean2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/c/cb");

$td->runtest("dependencies",
	     {$td->COMMAND => "abuild --build=deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.depitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("single-build item build",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.all0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("ccxx_debug",
	     {$td->COMMAND => "abuild ccxx_debug",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.ccxx-debug.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean all",
	     {$td->COMMAND => "abuild --clean=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allclean0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work");

$td->runtest("no more .ab-dyanmic.mk files",
	     {$td->COMMAND =>
		  "find . -type f -name .ab-dynamic.mk -print" .
		  " -o -name ext -prune | wc -l"},
	     {$td->REGEXP => "\\s*0\\s*",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/c/cb");

$td->runtest("rules help",
	     {$td->COMMAND => "abuild rules-help"},
	     {$td->REGEXP => 'Help for users of RULES=ccxx',
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("interface help",
	     {$td->COMMAND => "abuild interface-help"},
	     {$td->REGEXP => 'Help for Abuild.interface for C/C\+\+',
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/ext");

mkdir "subdir", 0777 or die;
cd("work/ext/subdir");

$td->runtest("clean all from ext",
	     {$td->COMMAND => "abuild --find-conf --clean=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.allclean1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/ext");

$td->runtest("clean named",
	     {$td->COMMAND => "abuild --clean=name:aa,cb",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean-names1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean pattern",
	     {$td->COMMAND => "abuild --clean=pattern:a.",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean-pattern1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean named with dependencies",
	     {$td->COMMAND => "abuild -c name:aa,cb --apply-targets-to-deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean-names2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean pattern with dependencies",
	     {$td->COMMAND => "abuild -c pattern:a. --apply-targets-to-deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.clean-pattern2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work");

$td->runtest("no more .ab-dyanmic.mk files",
	     {$td->COMMAND =>
		  "find . -type f -name .ab-dynamic.mk -print | wc -l"},
	     {$td->REGEXP => "\\s*0\\s*",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/a");

$td->runtest("unnamed directory",
	     {$td->COMMAND => "abuild"},
	     {$td->STRING =>
		  "abuild: nothing to build in this directory\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa");

$td->runtest("clean descendants",
	     {$td->COMMAND => "abuild --clean=desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.descclean.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("descendants",
	     {$td->COMMAND => "abuild --build=desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.descitems.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/autoconf");

$td->runtest("autoconf compiler invocation",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.autoconf.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/f");

# tree1 has "plugin".  tree2 has tree1 as an external and declares
# "plugin" as a plugin.  tree3 has both tree1 and tree2 in that order
# as externals and does not declare "plugin" as a plugin.  abuild 1.0
# had a bug that caused plugin's interface to not get created.
$td->runtest("plugin-anywhere",
	     {$td->COMMAND => "abuild -C tree3",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.plugin-anywhere.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Dependency on multiple instances of an interface.  "a" depends on
# two different instances of "b".

cd("work/g/good");

$td->runtest("double dependency on an item",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.double-dependency.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/g/bad");

$td->runtest("double dependency error",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test1.double-dependency-error.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/junit");

if ($test_junit)
{
    # In Windows, ant.bat does not return with an abnormal exit status
    # when the build fails.  This makes it impossible to tell whether
    # a build failed or not.
    my $xflag = in_windows() ? $td->EXPECT_FAILURE : 0;

    $td->runtest("junit with failure",
		 {$td->COMMAND => "abuild -b all test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test1.junit-failure.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES | $xflag);

    $td->runtest("junit with failure and -k",
		 {$td->COMMAND => "abuild -k -b all test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test1.junit-failure-k.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES | $xflag);

    $td->runtest("junit with no failures",
		 {$td->COMMAND => "abuild -d test -C test",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test1.junit-okay.out",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);
}
else
{
    # Make sure these files are accessed.
    system("(tar cf - . | cat > /dev/null)");
}

check_work_accessed($td, "test1.not-accessed.out");

# test2 and test3 test various abuild error conditions

setup($td, "test2");

$td->runtest("abuild errors",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.allitems0.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("dump data with errors",
	     {$td->COMMAND => "abuild --dump-data 2> /dev/null",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.dumpdata.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

validate_dump_data($td, 1);

cd("work/a/aa/aaa");

$td->runtest("no Abuild.conf",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.no-abuild.conf.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/aab");

$td->runtest("bad parent path",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.bad-parent.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/aac/aacc");

$td->runtest("parent/child problems",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.parent-child.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/aad/aada");

$td->runtest("childless parent",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.childless-parent.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/aae/aaea");

$td->runtest("Abuild.conf cycle",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.conf-cycle.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/aaf");

$td->runtest("bad externals 1",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.bad-externals1.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/ab/aba");

$td->runtest("bad externals 2",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.bad-externals2.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/aag");

$td->runtest("bad build tree root config",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.bad-root-config.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/aah/aaha");

$td->runtest("bad parent config",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.bad-parent-config.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/aa/aai/aaia");

$td->runtest("after-build with no build file config",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.after-build-no-buildfile.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/ae");

$td->runtest("child-dir cycle",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.conf-child-cycle.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/a/af");

# Also tests monitored with errors
$td->runtest("after-build errors",
	     {$td->COMMAND => "abuild --monitored --build=desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.bad-after-build.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/e/backing/c");

$td->runtest("dependency interface errors",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.dependency-interface.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/e/main/c");

$td->runtest("plugin interface errors",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.plugin-interface.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/e/other/a");

$td->runtest("plugin interface errors",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.bad-plugin-interface.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/e/platform");

$td->runtest("plugin platform errors",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.bad-plugin-platforms.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/f");

$td->runtest(".. in source files",
	     {$td->COMMAND => "abuild -k -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.dotdot-in-path.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/g");

$td->runtest("build failure: normal",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.build-failures.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build failure: keep going",
	     {$td->COMMAND => "abuild -b all -k",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.build-failures-keep-going.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build failure: no dep failures",
	     {$td->COMMAND => "abuild -b all -k --no-dep-failures",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test2.build-failures-no-dep-failures.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td, "test2.not-accessed.out");

setup($td, "test3");

$td->runtest("abuild dependency errors",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test3.allitems0.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

# test4 creates a public build item that is divided into private
# build items.

setup($td, "test4");

$td->runtest("all items",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test4.allitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check program 1",
	     {$td->COMMAND => "main/$native_out/main"},
	     {$td->STRING => "CUPrivate\nCUPublic\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check program 2",
	     {$td->COMMAND => "util/src/$native_out/src2-test"},
	     {$td->STRING => "src2\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad");

$td->runtest("BUILD_ITEM_RULES access",
	     {$td->COMMAND => "abuild --build=desc -k",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test4.access-errors.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

# In test 5, we exercise with ccxx's dependencies including updating
# an Abuild.mk to add a new source file and moving a header file
# around to force regeneration of automatic dependencies.

setup($td, "test5");

cd("work/util");

copy("Abuild.mk.0", "Abuild.mk") or die;

$td->runtest("no targets",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test5.util0.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

copy("Abuild.mk.1", "Abuild.mk") or die;

$td->runtest("no sources",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test5.util1.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

copy("Abuild.mk.2", "Abuild.mk") or die;

cd("work/main");

$td->runtest("good build",
	     {$td->COMMAND => "abuild --build=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test5.build0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Delay so mtime of Abuild.mk is definitely different from before
sleep 1;
copy("../util/Abuild.mk.3", "../util/Abuild.mk") or die;

$td->runtest("add a file",
	     {$td->COMMAND => "abuild --build=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test5.build1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("up to date",
	     {$td->COMMAND => "abuild --build=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test5.build2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

rename "../util/include1/File1.hpp", "../util/include2/File1.hpp" or die;
sleep 1;

$td->runtest("move header",
	     {$td->COMMAND => "abuild --build=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test5.build3.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

sleep 1;
my $now = time;
utime $now, $now, "../util/include2/File1.hpp" or die;

sleep 1;
$td->runtest("header file changed",
	     {$td->COMMAND => "abuild --with-deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test5.build4.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

sleep 1;
$now = time;
utime $now, $now, "../util/File2.cpp" or die;

sleep 1;
$td->runtest("source file changed",
	     {$td->COMMAND => "abuild -d check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test5.build5.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

# Test 6 exercises backing areas, traits as they inherit through
# externals and backing areas (which they do only for trees that are
# 100% resolved from backing areas), and plugins.

# Dependencies:
#   product-bin -> product-lib common-lib2 common-lib3
#   product-lib -> proudct-common common-lib1

# Backing aras
#   1/product -> other/2 -> shared

# shared/common/libs has no Abuild.conf so shared/common uses
# multicomponent child-dirs.

setup($td, "test6");

# Modify Abuild.conf in multi/product to contain an absolute external
cd("work/multi/product");
{
    open(IN, "<Abuild.conf") or die;
    my @lines = (<IN>);
    close(IN);
    open(OUT, ">Abuild.conf") or die;
    my $cwd = getcwd();
    my $newpath = dirname($cwd) . "/b";
    my $winpath = windir($newpath);
    for (@lines)
    {
	s,(external-dirs:.*?)(\Q../b\E),$1$newpath -winpath=$winpath,;
	print OUT;
    }
    close(OUT);
}

cd("work/shared/common");

$td->runtest("build backing area",
	     {$td->COMMAND => "abuild --build=desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.build-backing1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/other/2/product");

$td->runtest("build backing area",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.build-backing2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/1/product/bin");

$td->runtest("nested backing areas",
	     {$td->COMMAND => "abuild --build=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.normal1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

validate_dump_data($td);

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.dumpdata-backed-external.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check pbin",
	     {$td->COMMAND => "$native_out/pbin"},
	     {$td->FILE => "$top/test6.pbin.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/shared/product/bin");

$td->runtest("complete build area",
	     {$td->COMMAND => "abuild --build=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.normal2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check pbin",
	     {$td->COMMAND => "$native_out/pbin"},
	     {$td->FILE => "$top/test6.pbin.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/other/2/product");

$td->runtest("list traits",
	     {$td->COMMAND => "abuild --list-traits"},
	     {$td->FILE => "$top/test6.list-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/read-only/product");

validate_dump_data($td);

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.dumpdata.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("read-only build items 1",
	     {$td->COMMAND => "abuild --build=all no-op",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.read-only.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/multi/product");

validate_dump_data($td);

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.multi-dumpdata.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build multi/c",
	     {$td->COMMAND => "abuild -C ../c",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.multi-c.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("multiple external paths",
	     {$td->COMMAND => "abuild --build=deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.multi.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/1/common");

$td->runtest("backing cycle",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.backing-cycle.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/2/common");

$td->runtest("bad backing file",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.bad-backing.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/3/product/bin");

$td->runtest("backing area dependencies",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.backing-deps.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/3/product");

$td->runtest("non-local backing area dependencies",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.backing-deps-other.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/4/main/product");

$td->runtest("indirect dependency errors",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.indirect-deps.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/5/main");

$td->runtest("missing backing config",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.no-backing-conf.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/6/main/product");

$td->runtest("complex dependency errors",
	     {$td->COMMAND => "abuild --full-integrity",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.complex-dep-errors.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/7/main/product/other");

$td->runtest("full integrity",
	     {$td->COMMAND => "abuild --full-integrity",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.full-errors.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("local integrity",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.local-errors.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/7/main/product");

$td->runtest("irrelevant integrity errors",
	     {$td->COMMAND => "abuild"},
	     {$td->STRING =>
		  "abuild: nothing to build in this directory\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/8/product");

$td->runtest("bad deletions and plugins",
	     {$td->COMMAND => "abuild -b desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.bad-deletions.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td, "test6.not-accessed.out");

# Test 7 exercises resolving a circular dependency by separating
# interfaces and implementations.  This is a dangerous technique
# frought with pitfalls.  See documentation on separation of
# interfaces and implementations for details.  This used to test
# static build items before they were removed from the software, but
# the test was left in place to demonstrate that the same problem can
# be solved in the same way without static dependencies.

setup($td, "test7");

cd("work/good/prog");

$td->runtest("cyclic dependency: deps",
	     {$td->COMMAND => "abuild --build=deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test7.depitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/good");

$td->runtest("cyclic dependency: all",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test7.allitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check program",
	     {$td->COMMAND => "prog/$native_out/main"},
	     {$td->STRING => "a\nb\na\nb\na\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("cyclic dependency: clean",
	     {$td->COMMAND => "abuild --clean=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test7.allclean0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no more .ab-dyanmic.mk files",
	     {$td->COMMAND =>
		  "find . -type f -name .ab-dynamic.mk -print | wc -l"},
	     {$td->REGEXP => "\\s*0\\s*",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

# Test 8 exercises various dependency chains that cross platform type
# boundaries.  Build items are named such that their lexical sorting
# is the opposite of their topological sorting so we are sure that
# just looking at the build order is sufficient.  The special build
# item "rules" contains rules to just print the name of the build
# item.  Additional cases are covered in doc/example.

setup($td, "test8");

cd("work/bad1");

$td->runtest("dep platform type declaration errors",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test8.bad1.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad2");

$td->runtest("dep platform type runtime errors",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test8.bad2.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/case1");

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test8.case1.dumpdata.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("object-code -> indep -> object-code",
	     {$td->COMMAND => "abuild -b desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test8.case1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/case2");

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test8.case2.dumpdata.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("oc/java -> all -> all -> oc/java/indep",
	     {$td->COMMAND => "abuild -b desc no-op",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test8.case2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("dump build graph",
	     {$td->COMMAND => "abuild -b desc --dump-build-graph",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test8.case2.buildgraph.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td, "test8.not-accessed.out");

# Test 9 exercises traits.

# We have three traits: eater, painter, and edible.  A depends upon
# A-dep, is eaten by AB-eater, and is painted by A-painter.
# Additionally, A-dep is painted by A-dep-painter.  B is also eaten by
# AB-eater and by B-eater.  A-eater-painter both paints and eats A.
# Painters and eaters depend upon the things they paint or eat.  A and
# B are both edible by AB-eater even though the dependency is in the
# reverse direction.  The directory structure is set up so that A is
# under its own directory and everything else is together.  This makes
# it easy to construct build sets that initially contain only A.  We
# illustrate several things:
#
#  * When we create a build set starting with A and expand it with the
#    eater trait, this pulls in AB-eater which in turn depends upon B.
#    This subsequently pulls in B-eater.
#
#  * A and B are related to other build items that depend upon them
#    and that they therefore do not depend upon.  This exercises the
#    lack of connection between the dependency graph and trait
#    relationships.
#
#  * We use the various traits both as only-with traits and as
#    related-by traits.
#
#  * If we create a build set using the painter trait and expand it
#    using the eater trait, we get A as a dependency of A-painter and
#    AB-eater as an eater of A.  If we create a build set using the
#    eater trait and expand it using the painter trait, we also get
#    B-eater.
#
#  * If we build a set using both the eater and the painter traits, we
#    get only the item that is both along with its dependencies.
#
#  * Trait-based clean sets do not follow dependencies.
#
# Everything depends upon additional build items that define other
# targets so we can always tell the difference between the default
# target and the explicit target.

setup($td, "test9");

cd("work/A");

$td->runtest("no traits",
	     {$td->COMMAND => "abuild --build=desc hello"},
	     {$td->FILE => "$top/test9.no-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("desc expanded with eater",
	     {$td->COMMAND => "abuild --build=desc" .
		  " --related-by-traits eater eat"},
	     {$td->FILE => "$top/test9.desc-eater.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work");

$td->runtest("build eater painter",
	     {$td->COMMAND => "abuild --build=all" .
		  " --only-with-traits eater,painter eat paint"},
	     {$td->FILE => "$top/test9.build-eater-painter.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build eater expand painter",
	     {$td->COMMAND => "abuild --build=all --only-with-traits eater" .
		  " --related-by-traits painter paint"},
	     {$td->FILE => "$top/test9.build-eater-expand-painter.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build painter expand eater",
	     {$td->COMMAND => "abuild --build=all --only-with-traits painter" .
		  " --related-by-traits eater eat"},
	     {$td->FILE => "$top/test9.build-painter-expand-eater.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/A");

$td->runtest("build edible",
	     {$td->COMMAND => "abuild --build=all" .
		  " --only-with-traits edible hello"},
	     {$td->FILE => "$top/test9.build-edible.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build desc edible",
	     {$td->COMMAND => "abuild --build=desc" .
		  " --only-with-traits edible hello"},
	     {$td->FILE => "$top/test9.build-desc-edible.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work");

$td->runtest("build edible expand eater",
	     {$td->COMMAND => "abuild --build=all --only-with-traits edible" .
		  " --related-by-traits eater eat"},
	     {$td->FILE => "$top/test9.build-edible-expand-eater.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean edible expand eater",
	     {$td->COMMAND => "abuild --clean=all --only-with-traits edible" .
		  " --related-by-traits eater"},
	     {$td->FILE => "$top/test9.clean-edible-expand-eater.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean painter",
	     {$td->COMMAND => "abuild --clean=all --only-with-traits painter"},
	     {$td->FILE => "$top/test9.clean-painter.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean all",
	     {$td->COMMAND => "abuild --clean=all"},
	     {$td->FILE => "$top/test9.clean-all.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

# Test 10 exercises shared libraries.  Although shared library
# functionality is exercised in the examples and in other parts of the
# test suite, test10 goes through several scenarios that cover some of
# the corner cases and potential pitfalls of using shared libraries.
# The idea of these test cases is to make sure that doing proper
# dependency-aware builds successfully mitigates most of the problems.

# The following build items are used in these test cases:

# static: a library with a method called printString whose value comes
# from a file at compile time.

# shared1: a shared library that depends on static and has the option
# of being built either with or without linking against the static
# library.  After build, it resets LIBS and adds itself so that
# depending on shared1 doesn't put static into the library list.

# prog1: depends on shared1 but not on static; can only link if static
# is linked into shared1.

# shared1-alt: identical interface to shared1 enabling it to replace
# shared1 at runtime; depends on static and links with its library.
# Also uses an after-build file to remove static from the library
# list.

# shared2: different interface; also depends privately on static, and
# also has the option of being build without linking the static
# library.

# prog2: like prog1 but links with shared2

# prog3: links with shared1 and shared2; enables us to exercise
# conditions in which shared1 and shared2 where both linked with
# static

# prog4: links with shared1 and static, calls printString itself;
# enables us to exercise conditions in which prog4 and shared1 both
# have static

# In addition to the above, we also exercise handling of orphan
# targets in ccxx here.

setup($td, "test10");

cd("work");

# Set the static string to "shared1"
write_static("shared1");

cd("work/static");
$td->runtest("build static with shared1",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.static-shared1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/shared1");

if (! in_windows())
{
    # Windows doesn't allow us to have a DLL with unresolved symbols.

    $td->runtest("build shared1 without static",
		 {$td->COMMAND => "abuild --make SKIP_LINK=1",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test10.shared1-build.out",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);

    cd("work/prog1");
    # prog1 can't link because static was not linked into shared1
    $td->runtest("link failure on prog1",
		 {$td->COMMAND => "abuild --monitored",
		  $td->FILTER =>
		      "perl $filters/filter-abuild.pl | grep '^abuild-monitor: '"},
		 {$td->FILE => "$top/test10.prog1-link-failure.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES);

    cd("work/shared1");
    $td->runtest("clean shared1",
		 {$td->COMMAND => "abuild clean"},
		 {$td->STRING => "abuild: cleaning in .\n",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);
}

$td->runtest("build shared1 with static",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.shared1-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/prog1");

$td->runtest("clean prog1",
	     {$td->COMMAND => "abuild clean"},
	     {$td->STRING => "abuild: cleaning in .\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("link prog1",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.prog1-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# See "shared1" from the copy of static in shared1
$td->runtest("run prog1",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared1"]) . "$native_out/prog1"},
	     {$td->STRING =>
		  "prog1 calling shared1: shared1 calling static: shared1\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/static");

$td->runtest("clean static",
	     {$td->COMMAND => "abuild clean"},
	     {$td->STRING => "abuild: cleaning in .\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

write_static("shared1-alt");

$td->runtest("build static with shared1-alt",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.static-shared1-alt.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/shared1-alt");

$td->runtest("build shared1-alt",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.shared1-alt-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/prog1");

# See "shared1" from the copy of static in shared1
$td->runtest("run prog1 with shared1",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared1"]) . "$native_out/prog1"},
	     {$td->STRING =>
		  "prog1 calling shared1: shared1 calling static: shared1\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# See "shared1-alt" from the copy of static in shared1-alt
$td->runtest("run prog1 with shared1-alt",
	     {$td->COMMAND => prepend_runtime_pathvar(["shared1-alt"]) .
		  "$native_out/prog1"},
	     {$td->STRING =>
		  "prog1 calling shared1: shared1-alt calling static: shared1-alt\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/static");

$td->runtest("clean static",
	     {$td->COMMAND => "abuild clean"},
	     {$td->STRING => "abuild: cleaning in .\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

write_static("shared2");

$td->runtest("build static with shared2",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.static-shared2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/shared2");

$td->runtest("build shared2",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.shared2-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);


cd("work/prog2");

$td->runtest("build prog2",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.prog2-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# See "shared2" from the copy of static in shared2
$td->runtest("run prog2 with shared2",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared2"]) . "$native_out/prog2"},
	     {$td->STRING =>
		  "prog2 calling shared2: shared2 calling static: shared2\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/prog3");

$td->runtest("build prog3",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.prog3-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# In UNIX, for both calls, see "shared2" from the copy of static in
# shared2.  (Since shared1 and shared2 are not related by dependency,
# shared2's interface gets loaded last (since it follows shared1
# alphabetically).  Since LIBS is a prepend list, shared2 gets linked
# into prog3 first and that's where prog3 resolves Static from.  Even
# the call to Static from a function in shared1 sees it there.)  In
# Windows, each DLL sees the copy of the static function that is
# linked into it.
my $prog3_shared1 = (in_windows() ? "shared1" : "shared2");
$td->runtest("run prog3",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared1", "shared2"]) .
		  "$native_out/prog3"},
	     {$td->STRING =>
		  "prog3 calling shared1: shared1 calling static: $prog3_shared1\n" .
		  "prog3 calling shared2: shared2 calling static: shared2\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

if (! in_windows())
{
    cd("work/shared2");

    $td->runtest("clean shared2",
		 {$td->COMMAND => "abuild clean"},
		 {$td->STRING => "abuild: cleaning in .\n",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);

    $td->runtest("build shared2 without static",
		 {$td->COMMAND => "abuild --make SKIP_LINK=1",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test10.shared2-build.out",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);

    cd("work/prog3");

    # This time, since shared2 doesn't have static, we see shared1.
    $td->runtest("run prog3",
		 {$td->COMMAND =>
		      prepend_runtime_pathvar(["shared1", "shared2"]) .
		      "$native_out/prog3"},
		 {$td->STRING =>
		      "prog3 calling shared1: shared1 calling static: shared1\n" .
		      "prog3 calling shared2: shared2 calling static: shared1\n",
		      $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);
}

cd("work/static");

$td->runtest("clean static",
	     {$td->COMMAND => "abuild clean"},
	     {$td->STRING => "abuild: cleaning in .\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

write_static("prog4");

$td->runtest("build static with prog4",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.static-prog4.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/prog4");

$td->runtest("build prog4",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.prog4-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# In UNIX, both calls see the copy of Static in prog4.  In Windows,
# shared1 sees "shared1".
my $prog4_shared1 = (in_windows() ? "shared1" : "prog4");
$td->runtest("run prog4",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared1"]) . "$native_out/prog4"},
	     {$td->STRING =>
		  "prog4 calling shared1: shared1 calling static: $prog4_shared1\n" .
		  "prog4 calling static: prog4\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/extra-targets");

$td->runtest("extra targets: build all",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-targets.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Create extra dep file
create_file("$native_out/extra.dep");

$td->runtest("build with extra dep",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-dep.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build does nothing",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-nothing.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Create extra object file
my $xobj = (in_windows() ? 'obj' : 'o');
create_file("$native_out/extra.$xobj");

$td->runtest("build with extra object file",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-obj.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build does nothing",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-nothing.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Create extra library file
my $xlib = (in_windows() ? 'extra.lib' : 'libextra.a');
create_file("$native_out/$xlib");

$td->runtest("build with extra library",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-lib.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build does nothing",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-nothing.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

$td->report(215 +
	    (in_windows() ? 0 : 6) +
	    ($test_junit ? 3 : 0));
