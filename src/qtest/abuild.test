#!/usr/bin/env perl

require 5.008;
BEGIN { $^W = 1; }
use strict;

require TestDriver;
require abuild_test_utils;

chdir("abuild") or die;

my $td = new TestDriver("abuild");
test_setup();

my $top = get_top();
my $filters = get_filters();

# XXX only when needed
my $native_out = get_native_out();

# Test 6 exercises backing areas, traits as they inherit through
# externals and backing areas (which they do only for trees that are
# 100% resolved from backing areas), and plugins.

# Dependencies:
#   product-bin -> product-lib common-lib2 common-lib3
#   product-lib -> proudct-common common-lib1

# Backing aras
#   1/product -> other/2 -> shared

# shared/common/libs has no Abuild.conf so shared/common uses
# multicomponent child-dirs.

setup($td, "test6");		# XXX

# Modify Abuild.conf in multi/product to contain an absolute external
cd("work/multi/product");
{
    open(IN, "<Abuild.conf") or die;
    my @lines = (<IN>);
    close(IN);
    open(OUT, ">Abuild.conf") or die;
    my $cwd = getcwd();
    my $newpath = dirname($cwd) . "/b";
    my $winpath = windir($newpath);
    for (@lines)
    {
	s,(external-dirs:.*?)(\Q../b\E),$1$newpath -winpath=$winpath,;
	print OUT;
    }
    close(OUT);
}

cd("work/shared/common");

$td->runtest("build backing area",
	     {$td->COMMAND => "abuild --build=desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.build-backing1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/other/2/product");

$td->runtest("build backing area",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.build-backing2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/1/product/bin");

$td->runtest("nested backing areas",
	     {$td->COMMAND => "abuild --build=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.normal1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

validate_dump_data($td);

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.dumpdata-backed-external.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check pbin",
	     {$td->COMMAND => "$native_out/pbin"},
	     {$td->FILE => "$top/test6.pbin.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/shared/product/bin");

$td->runtest("complete build area",
	     {$td->COMMAND => "abuild --build=current",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.normal2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check pbin",
	     {$td->COMMAND => "$native_out/pbin"},
	     {$td->FILE => "$top/test6.pbin.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/other/2/product");

$td->runtest("list traits",
	     {$td->COMMAND => "abuild --list-traits"},
	     {$td->FILE => "$top/test6.list-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/read-only/product");

validate_dump_data($td);

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.dumpdata.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);
$td->runtest("read-only build items 1",
	     {$td->COMMAND => "abuild --build=all no-op",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.read-only.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/multi/product");

validate_dump_data($td);

$td->runtest("dump data",
	     {$td->COMMAND => "abuild --dump-data",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.multi-dumpdata.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build multi/c",
	     {$td->COMMAND => "abuild -C ../c",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.multi-c.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("multiple external paths",
	     {$td->COMMAND => "abuild --build=deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.multi.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/1/common");

$td->runtest("backing cycle",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.backing-cycle.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/2/common");

$td->runtest("bad backing file",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.bad-backing.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/3/product/bin");

$td->runtest("backing area dependencies",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.backing-deps.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/3/product");

$td->runtest("non-local backing area dependencies",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.backing-deps-other.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/4/main/product");

$td->runtest("indirect dependency errors",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.indirect-deps.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/5/main");

$td->runtest("missing backing config",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.no-backing-conf.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/6/main/product");

$td->runtest("complex dependency errors",
	     {$td->COMMAND => "abuild --full-integrity",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.complex-dep-errors.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/7/main/product/other");

$td->runtest("full integrity",
	     {$td->COMMAND => "abuild --full-integrity",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.full-errors.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("local integrity",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.local-errors.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/7/main/product");

$td->runtest("irrelevant integrity errors",
	     {$td->COMMAND => "abuild"},
	     {$td->STRING =>
		  "abuild: nothing to build in this directory\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/bad/8/product");

$td->runtest("bad deletions and plugins",
	     {$td->COMMAND => "abuild -b desc",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test6.bad-deletions.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td, "test6.not-accessed.out");

# Test 7 exercises resolving a circular dependency by separating
# interfaces and implementations.  This is a dangerous technique
# frought with pitfalls.  See documentation on separation of
# interfaces and implementations for details.  This used to test
# static build items before they were removed from the software, but
# the test was left in place to demonstrate that the same problem can
# be solved in the same way without static dependencies.

setup($td, "test7");		# XXX

cd("work/good/prog");

$td->runtest("cyclic dependency: deps",
	     {$td->COMMAND => "abuild --build=deps",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test7.depitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/good");

$td->runtest("cyclic dependency: all",
	     {$td->COMMAND => "abuild --build=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test7.allitems0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("check program",
	     {$td->COMMAND => "prog/$native_out/main"},
	     {$td->STRING => "a\nb\na\nb\na\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("cyclic dependency: clean",
	     {$td->COMMAND => "abuild --clean=all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test7.allclean0.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("no more .ab-dyanmic.mk files",
	     {$td->COMMAND =>
		  "find . -type f -name .ab-dynamic.mk -print | wc -l"},
	     {$td->REGEXP => "\\s*0\\s*",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

# Test 9 exercises traits.

# We have three traits: eater, painter, and edible.  A depends upon
# A-dep, is eaten by AB-eater, and is painted by A-painter.
# Additionally, A-dep is painted by A-dep-painter.  B is also eaten by
# AB-eater and by B-eater.  A-eater-painter both paints and eats A.
# Painters and eaters depend upon the things they paint or eat.  A and
# B are both edible by AB-eater even though the dependency is in the
# reverse direction.  The directory structure is set up so that A is
# under its own directory and everything else is together.  This makes
# it easy to construct build sets that initially contain only A.  We
# illustrate several things:
#
#  * When we create a build set starting with A and expand it with the
#    eater trait, this pulls in AB-eater which in turn depends upon B.
#    This subsequently pulls in B-eater.
#
#  * A and B are related to other build items that depend upon them
#    and that they therefore do not depend upon.  This exercises the
#    lack of connection between the dependency graph and trait
#    relationships.
#
#  * We use the various traits both as only-with traits and as
#    related-by traits.
#
#  * If we create a build set using the painter trait and expand it
#    using the eater trait, we get A as a dependency of A-painter and
#    AB-eater as an eater of A.  If we create a build set using the
#    eater trait and expand it using the painter trait, we also get
#    B-eater.
#
#  * If we build a set using both the eater and the painter traits, we
#    get only the item that is both along with its dependencies.
#
#  * Trait-based clean sets do not follow dependencies.
#
# Everything depends upon additional build items that define other
# targets so we can always tell the difference between the default
# target and the explicit target.

setup($td, "test9");		# XXX

cd("work/A");

$td->runtest("no traits",
	     {$td->COMMAND => "abuild --build=desc hello"},
	     {$td->FILE => "$top/test9.no-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("desc expanded with eater",
	     {$td->COMMAND => "abuild --build=desc" .
		  " --related-by-traits eater eat"},
	     {$td->FILE => "$top/test9.desc-eater.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work");

$td->runtest("build eater painter",
	     {$td->COMMAND => "abuild --build=all" .
		  " --only-with-traits eater,painter eat paint"},
	     {$td->FILE => "$top/test9.build-eater-painter.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build eater expand painter",
	     {$td->COMMAND => "abuild --build=all --only-with-traits eater" .
		  " --related-by-traits painter paint"},
	     {$td->FILE => "$top/test9.build-eater-expand-painter.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build painter expand eater",
	     {$td->COMMAND => "abuild --build=all --only-with-traits painter" .
		  " --related-by-traits eater eat"},
	     {$td->FILE => "$top/test9.build-painter-expand-eater.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/A");

$td->runtest("build edible",
	     {$td->COMMAND => "abuild --build=all" .
		  " --only-with-traits edible hello"},
	     {$td->FILE => "$top/test9.build-edible.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build desc edible",
	     {$td->COMMAND => "abuild --build=desc" .
		  " --only-with-traits edible hello"},
	     {$td->FILE => "$top/test9.build-desc-edible.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work");

$td->runtest("build edible expand eater",
	     {$td->COMMAND => "abuild --build=all --only-with-traits edible" .
		  " --related-by-traits eater eat"},
	     {$td->FILE => "$top/test9.build-edible-expand-eater.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean edible expand eater",
	     {$td->COMMAND => "abuild --clean=all --only-with-traits edible" .
		  " --related-by-traits eater"},
	     {$td->FILE => "$top/test9.clean-edible-expand-eater.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean painter",
	     {$td->COMMAND => "abuild --clean=all --only-with-traits painter"},
	     {$td->FILE => "$top/test9.clean-painter.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean all",
	     {$td->COMMAND => "abuild --clean=all"},
	     {$td->FILE => "$top/test9.clean-all.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

# Test 10 exercises shared libraries.  Although shared library
# functionality is exercised in the examples and in other parts of the
# test suite, test10 goes through several scenarios that cover some of
# the corner cases and potential pitfalls of using shared libraries.
# The idea of these test cases is to make sure that doing proper
# dependency-aware builds successfully mitigates most of the problems.

# The following build items are used in these test cases:

# static: a library with a method called printString whose value comes
# from a file at compile time.

# shared1: a shared library that depends on static and has the option
# of being built either with or without linking against the static
# library.  After build, it resets LIBS and adds itself so that
# depending on shared1 doesn't put static into the library list.

# prog1: depends on shared1 but not on static; can only link if static
# is linked into shared1.

# shared1-alt: identical interface to shared1 enabling it to replace
# shared1 at runtime; depends on static and links with its library.
# Also uses an after-build file to remove static from the library
# list.

# shared2: different interface; also depends privately on static, and
# also has the option of being build without linking the static
# library.

# prog2: like prog1 but links with shared2

# prog3: links with shared1 and shared2; enables us to exercise
# conditions in which shared1 and shared2 where both linked with
# static

# prog4: links with shared1 and static, calls printString itself;
# enables us to exercise conditions in which prog4 and shared1 both
# have static

# In addition to the above, we also exercise handling of orphan
# targets in ccxx here.

setup($td, "test10");		# XXX

cd("work");

# Set the static string to "shared1"
write_static("shared1");

cd("work/static");
$td->runtest("build static with shared1",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.static-shared1.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/shared1");

if (! in_windows())
{
    # Windows doesn't allow us to have a DLL with unresolved symbols.

    $td->runtest("build shared1 without static",
		 {$td->COMMAND => "abuild --make SKIP_LINK=1",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test10.shared1-build.out",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);

    cd("work/prog1");
    # prog1 can't link because static was not linked into shared1
    $td->runtest("link failure on prog1",
		 {$td->COMMAND => "abuild --monitored",
		  $td->FILTER =>
		      "perl $filters/filter-abuild.pl | grep '^abuild-monitor: '"},
		 {$td->FILE => "$top/test10.prog1-link-failure.out",
		  $td->EXIT_STATUS => 2},
		 $td->NORMALIZE_NEWLINES);

    cd("work/shared1");
    $td->runtest("clean shared1",
		 {$td->COMMAND => "abuild clean"},
		 {$td->STRING => "abuild: cleaning in .\n",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);
}

$td->runtest("build shared1 with static",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.shared1-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/prog1");

$td->runtest("clean prog1",
	     {$td->COMMAND => "abuild clean"},
	     {$td->STRING => "abuild: cleaning in .\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("link prog1",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.prog1-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# See "shared1" from the copy of static in shared1
$td->runtest("run prog1",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared1"]) . "$native_out/prog1"},
	     {$td->STRING =>
		  "prog1 calling shared1: shared1 calling static: shared1\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/static");

$td->runtest("clean static",
	     {$td->COMMAND => "abuild clean"},
	     {$td->STRING => "abuild: cleaning in .\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

write_static("shared1-alt");

$td->runtest("build static with shared1-alt",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.static-shared1-alt.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/shared1-alt");

$td->runtest("build shared1-alt",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.shared1-alt-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/prog1");

# See "shared1" from the copy of static in shared1
$td->runtest("run prog1 with shared1",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared1"]) . "$native_out/prog1"},
	     {$td->STRING =>
		  "prog1 calling shared1: shared1 calling static: shared1\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# See "shared1-alt" from the copy of static in shared1-alt
$td->runtest("run prog1 with shared1-alt",
	     {$td->COMMAND => prepend_runtime_pathvar(["shared1-alt"]) .
		  "$native_out/prog1"},
	     {$td->STRING =>
		  "prog1 calling shared1: shared1-alt calling static: shared1-alt\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/static");

$td->runtest("clean static",
	     {$td->COMMAND => "abuild clean"},
	     {$td->STRING => "abuild: cleaning in .\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

write_static("shared2");

$td->runtest("build static with shared2",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.static-shared2.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/shared2");

$td->runtest("build shared2",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.shared2-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);


cd("work/prog2");

$td->runtest("build prog2",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.prog2-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# See "shared2" from the copy of static in shared2
$td->runtest("run prog2 with shared2",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared2"]) . "$native_out/prog2"},
	     {$td->STRING =>
		  "prog2 calling shared2: shared2 calling static: shared2\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/prog3");

$td->runtest("build prog3",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.prog3-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# In UNIX, for both calls, see "shared2" from the copy of static in
# shared2.  (Since shared1 and shared2 are not related by dependency,
# shared2's interface gets loaded last (since it follows shared1
# alphabetically).  Since LIBS is a prepend list, shared2 gets linked
# into prog3 first and that's where prog3 resolves Static from.  Even
# the call to Static from a function in shared1 sees it there.)  In
# Windows, each DLL sees the copy of the static function that is
# linked into it.
my $prog3_shared1 = (in_windows() ? "shared1" : "shared2");
$td->runtest("run prog3",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared1", "shared2"]) .
		  "$native_out/prog3"},
	     {$td->STRING =>
		  "prog3 calling shared1: shared1 calling static: $prog3_shared1\n" .
		  "prog3 calling shared2: shared2 calling static: shared2\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

if (! in_windows())
{
    cd("work/shared2");

    $td->runtest("clean shared2",
		 {$td->COMMAND => "abuild clean"},
		 {$td->STRING => "abuild: cleaning in .\n",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);

    $td->runtest("build shared2 without static",
		 {$td->COMMAND => "abuild --make SKIP_LINK=1",
		  $td->FILTER => "perl $filters/filter-abuild.pl"},
		 {$td->FILE => "$top/test10.shared2-build.out",
		  $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);

    cd("work/prog3");

    # This time, since shared2 doesn't have static, we see shared1.
    $td->runtest("run prog3",
		 {$td->COMMAND =>
		      prepend_runtime_pathvar(["shared1", "shared2"]) .
		      "$native_out/prog3"},
		 {$td->STRING =>
		      "prog3 calling shared1: shared1 calling static: shared1\n" .
		      "prog3 calling shared2: shared2 calling static: shared1\n",
		      $td->EXIT_STATUS => 0},
		 $td->NORMALIZE_NEWLINES);
}

cd("work/static");

$td->runtest("clean static",
	     {$td->COMMAND => "abuild clean"},
	     {$td->STRING => "abuild: cleaning in .\n",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

write_static("prog4");

$td->runtest("build static with prog4",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.static-prog4.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/prog4");

$td->runtest("build prog4",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.prog4-build.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# In UNIX, both calls see the copy of Static in prog4.  In Windows,
# shared1 sees "shared1".
my $prog4_shared1 = (in_windows() ? "shared1" : "prog4");
$td->runtest("run prog4",
	     {$td->COMMAND =>
		  prepend_runtime_pathvar(["shared1"]) . "$native_out/prog4"},
	     {$td->STRING =>
		  "prog4 calling shared1: shared1 calling static: $prog4_shared1\n" .
		  "prog4 calling static: prog4\n",
		  $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/extra-targets");

$td->runtest("extra targets: build all",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-targets.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Create extra dep file
create_file("$native_out/extra.dep");

$td->runtest("build with extra dep",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-dep.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build does nothing",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-nothing.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Create extra object file
my $xobj = (in_windows() ? 'obj' : 'o');
create_file("$native_out/extra.$xobj");

$td->runtest("build with extra object file",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-obj.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build does nothing",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-nothing.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Create extra library file
my $xlib = (in_windows() ? 'extra.lib' : 'libextra.a');
create_file("$native_out/$xlib");

$td->runtest("build with extra library",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-lib.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build does nothing",
	     {$td->COMMAND => "abuild",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/test10.extra-nothing.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td);

$td->report(75 + (in_windows() ? 0 : 6));
