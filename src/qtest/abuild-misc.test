#!/usr/bin/env perl

require 5.008;
BEGIN { $^W = 1; }
use strict;

require TestDriver;
require abuild_test_utils;

chdir("abuild-misc") or die;

my $td = new TestDriver("miscellaneous");
test_setup();

my $top = get_top();
my $filters = get_filters();

# This test suite is a place where we dump additional random tests,
# which may include backing areas and externals or any other feature,
# to exercise previously detected bugs.  XXX

setup($td);

cd("work/h/multipass/a");

$td->runtest("multipass build-also explicit targets",
	     {$td->COMMAND => "abuild -d check",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/h.multipass.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("build-also and related-by-traits",
	     {$td->COMMAND => "abuild -d check --related-by-traits trait",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/h.build-also-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/h/multipass");

$td->runtest("build-also and only-with-traits",
	     {$td->COMMAND => "abuild -b all check --only-with-traits trait",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/h.only-with-traits.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

$td->runtest("clean",
	     {$td->COMMAND => "abuild -c all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/h.multipass-clean.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

validate_dump_data($td);

cd("work/autoconf");

$td->runtest("autoconf compiler invocation",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/autoconf.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/f");

# tree1 has "plugin".  tree2 has tree1 as an external and declares
# "plugin" as a plugin.  tree3 has both tree1 and tree2 in that order
# as externals and does not declare "plugin" as a plugin.  abuild 1.0
# had a bug that caused plugin's interface to not get created.
$td->runtest("plugin-anywhere",
	     {$td->COMMAND => "abuild -C tree3",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/plugin-anywhere.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

# Dependency on multiple instances of an interface.  "a" depends on
# two different instances of "b".

cd("work/g/good");

$td->runtest("double dependency on an item",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/double-dependency.out",
	      $td->EXIT_STATUS => 0},
	     $td->NORMALIZE_NEWLINES);

cd("work/g/bad");

$td->runtest("double dependency error",
	     {$td->COMMAND => "abuild -b all",
	      $td->FILTER => "perl $filters/filter-abuild.pl"},
	     {$td->FILE => "$top/double-dependency-error.out",
	      $td->EXIT_STATUS => 2},
	     $td->NORMALIZE_NEWLINES);

check_work_accessed($td, "not-accessed.out");

$td->report(10);
