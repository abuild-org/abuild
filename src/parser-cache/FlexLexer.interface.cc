#define yyFlexLexer yy_interfaceFlexLexer

#line 4 "FlexLexer.interface.cc"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int InterfaceLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 34
#define YY_END_OF_BUFFER 35
static yyconst short int yy_accept[351] =
    {   0,
        0,    0,   35,   33,   32,    2,   33,   33,    6,    5,
       29,    4,   33,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   32,   33,   32,    2,
        0,    6,    5,    4,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
        5,    0,   28,   29,    4,    3,   32,    3,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   32,    0,    0,    1,
       32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   32,   29,   29,   29,   29,   29,   29,   29,
       29,   29,    0,    7,   29,   29,   29,   29,   29,   29,
       29,   29,   29,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   30,    0,   29,   29,   29,   29,    9,
       29,   29,   29,   16,   21,   29,   29,   29,   29,   29,
       29,   29,   29,    0,    0,    0,    0,    9,    0,    0,
        0,   16,   21,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   29,   29,   29,   29,    9,   29,   10,   29,
       29,   16,   21,   25,   29,   29,   29,   29,   11,   29,

       29,    0,    0,    0,    0,    9,    0,   10,    0,    0,
       16,   21,   25,    0,    0,    0,    0,   11,    0,    0,
        0,   29,   22,   29,   29,   29,   10,   29,   29,   25,
       29,   29,   29,   29,   11,   29,   19,   29,    0,   22,
        0,    0,    0,   10,    0,    0,   25,    0,    0,    0,
        0,   11,    0,   19,    0,    0,   29,   22,   18,   17,
        0,    8,   29,   29,   29,   29,   29,   23,   29,   19,
       29,    0,   22,   18,   17,    0,    8,    0,    0,    0,
        0,    0,   23,    0,   19,    0,   31,   29,   18,   17,
       15,   20,   13,   29,   14,   23,   29,   29,    0,   18,

       17,   15,   20,   13,    0,   14,   23,    0,    0,   29,
       15,   20,   13,   29,   14,   12,   29,    0,   15,   20,
       13,    0,   14,   12,    0,   29,   29,   12,   29,    0,
        0,   12,    0,   26,   29,   27,   26,    0,   27,   26,
       29,   27,   26,    0,   27,   24,   24,   24,   24,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    6,    1,    1,    1,    7,
        8,    1,    1,    9,   10,   11,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
       14,    1,    1,    1,   12,   12,   12,   12,   15,   12,
       12,   12,   12,   12,   12,   12,   12,   16,   12,   12,
       12,   12,   12,   12,   12,   17,   12,   12,   12,   12,
        1,   18,    1,    1,   12,    1,   19,   20,   21,   22,

       23,   24,   25,   12,   26,   12,   27,   28,   29,   30,
       31,   32,   12,   33,   34,   35,   36,   37,   12,   12,
       38,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[39] =
    {   0,
        1,    2,    1,    1,    1,    1,    2,    1,    1,    3,
        3,    4,    1,    1,    4,    4,    4,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst short int yy_base[356] =
    {   0,
        0,   37,  695,  696,   41,  696,  691,  686,  690,  689,
       39,  688,   44,   55,   49,   75,   76,   82,   79,   83,
       86,   89,   90,   92,   93,   51,  100,  686,    0,  696,
      685,  685,  684,  683,  108,   89,  653,  660,   24,   99,
      658,   93,  650,  643,  646,  655,  642,  657,  660,  672,
      671,  127,  696,  128,  670,  696,  114,  668,  129,  131,
      135,  137,  138,  139,  141,  145,  148,  147,  149,  155,
      158,  168,  172,  175,  178,  179,  182,  667,  666,  696,
      176,  665,  632,  634,  634,  643,  629,  640,  633,  632,
      640,  190,  624,  636,  180,  633,  632,  620,  620,  619,

      643,  185,  187,  196,  197,  200,  206,  214,  215,  216,
      222,  223,  224,  696,  225,  231,  233,  244,  240,  250,
      251,  254,  260,  627,  626,  620,  619,  623,  619,  616,
      620,  617,  257,  696,  606,  621,  606,  628,  604,  604,
      612,  608,  608,  696,  198,  261,  263,  269,  270,  276,
      277,  279,  288,  289,  296,  298,  302,  304,  305,  306,
      308,  312,  321,  599,  601,  607,  610,  295,  604,  607,
      596,  623,  622,  595,  599,  588,  587,  596,  583,  587,
      593,  309,  325,  329,  338,  332,  339,  345,  346,  347,
      348,  354,  356,  357,  366,  368,  369,  372,  370,  376,

      379,  605,  592,  594,  579,  609,  586,  607,  589,  588,
      604,  603,  602,  569,  579,  575,  570,  314,  574,  563,
        0,  383,  380,  382,  386,  390,  392,  403,  404,  406,
      413,  414,  415,  416,  423,  424,  425,  432,  577,  594,
      565,  571,  438,  591,  571,  562,  588,  566,  567,  565,
      564,  569,  551,  566,  557,  558,  439,  442,  445,  446,
      448,  696,  449,  455,  452,  456,  458,  459,  462,  465,
      466,  529,  562,  561,  560,  472,  696,  532,  535,  509,
      500,  504,  494,  443,  468,  394,  696,  478,  475,  481,
      482,  484,  491,  492,  493,  495,  501,  503,  402,  417,

      405,  402,  396,  394,  329,  358,  331,  302,  282,  504,
      505,  507,  511,  513,  514,  515,  517,  260,  285,  273,
      267,  221,  247,  241,  207,  521,  524,  528,  531,  214,
      188,  198,  173,  532,  535,  538,  169,  122,  151,  544,
      546,  550,  120,   97,  105,  553,   66,  554,   64,  696,
      571,  575,  579,  581,   36
    } ;

static yyconst short int yy_def[356] =
    {   0,
      350,    1,  350,  350,  350,  350,  350,  350,  350,  350,
      351,  350,  352,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,    5,  353,    5,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  354,  350,
      350,  350,  350,  351,  350,  350,  350,  350,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,    5,  353,  353,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      354,  354,  350,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  350,  350,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  354,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  354,  351,  351,  351,  351,  350,  351,  351,  351,
      351,  350,  350,  351,  351,  351,  351,  351,  351,  351,

      351,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      355,  351,  351,  351,  351,  351,  350,  351,  351,  350,
      351,  351,  351,  351,  350,  351,  351,  351,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  355,  351,  350,  351,  351,
      350,  350,  351,  351,  351,  351,  351,  351,  351,  350,
      351,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  351,  350,  350,
      351,  351,  351,  351,  351,  350,  351,  351,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  351,
      350,  350,  350,  351,  350,  351,  351,  350,  350,  350,
      350,  350,  350,  350,  350,  351,  351,  350,  351,  350,
      350,  350,  350,  351,  351,  351,  350,  350,  350,  350,
      351,  350,  350,  350,  350,  351,  350,  350,  350,    0,
      350,  350,  350,  350,  350
    } ;

static yyconst short int yy_nxt[735] =
    {   0,
        4,    5,    6,    7,    4,    8,    4,    9,   10,   11,
       11,   11,    4,   12,   11,   11,   11,   13,   14,   15,
       11,   16,   17,   18,   11,   19,   11,   20,   11,   21,
       22,   23,   24,   25,   26,   11,   11,   11,   27,  256,
       52,   28,   29,   30,   31,   53,   57,   58,   32,   33,
       52,   87,   52,   88,   34,   53,   52,   53,   35,   36,
       37,   53,   38,   39,   40,  349,   41,  349,   42,   76,
       43,   44,   45,   46,   47,   48,   52,   52,   59,   61,
       52,   53,   53,   52,   52,   53,   60,   52,   53,   53,
       52,   52,   53,   52,   52,   53,   53,   62,   53,   53,

       65,   77,   68,   63,   78,   64,  345,   66,   69,   67,
       81,   82,   83,   70,   74,  103,   71,   89,   93,  347,
       84,  343,   73,   94,   90,   72,   91,   75,   52,   52,
       52,   35,   52,   53,   53,   53,   52,   53,   52,   52,
       52,   53,   52,   53,   53,   53,   52,   53,  113,   52,
       52,   53,  345,  114,   53,   53,   52,  107,  344,   52,
      109,   53,  105,  104,   53,  106,  112,  117,  110,   52,
      343,  108,  111,   52,   53,  116,   52,  103,   53,   52,
       52,   53,  115,   77,   53,   53,   78,  118,  103,  137,
      119,  133,  144,   35,  120,  339,  134,   52,   52,  332,

      145,   52,   53,   53,   35,  144,   53,   52,  121,  138,
      122,  123,   53,  338,  182,   52,   52,   52,  146,  147,
       53,   53,   53,   52,   52,  113,   52,  148,   53,   53,
      114,   53,   52,  149,   52,  337,  150,   53,  333,   53,
      151,   52,  332,  152,  153,   52,   53,  154,  323,  156,
       53,   52,   52,  158,  331,   52,   53,   53,  133,  155,
       53,   52,   52,  134,   52,  157,   53,   53,  321,   53,
       52,   52,  159,  161,  320,   53,   53,  187,   52,  162,
       52,  160,   53,   53,  163,   53,  319,  330,  186,   52,
      192,  185,  184,  183,   53,   53,  206,  193,  190,   52,

      189,  188,   53,   52,   53,   52,   52,   52,   53,   52,
       53,   53,   53,   52,   53,  252,  144,  191,   53,  325,
      207,  221,   52,  253,  195,  194,   52,   53,  198,  324,
       52,   53,  307,   52,  222,   53,  196,  197,   53,   52,
      187,  200,  199,  201,   53,   53,   52,  227,   52,   52,
      223,   53,   53,   53,   53,  192,  224,  193,  230,  323,
       53,  322,   53,   53,  225,  228,  229,   52,  226,   52,
       52,  235,   53,   52,   53,   53,   53,   52,   53,  236,
       52,  258,   53,   52,   52,   53,   53,   52,   53,   53,
      232,  261,   53,  227,  233,  321,  262,  320,   53,  231,

      237,  234,  257,  319,   52,   52,  301,  230,  260,   53,
       53,  259,   53,  238,   52,   52,   52,   52,  300,   53,
       53,   53,   53,  263,  235,   52,  270,  318,  309,   53,
       53,   53,  264,   52,  266,  265,  267,  268,   53,  276,
       52,  271,  269,  258,  277,   53,  289,  290,   53,  261,
       52,   53,   53,   52,  262,   53,   52,   52,   53,   52,
      296,   53,   53,   52,   53,   53,  270,   52,   53,  285,
      308,   53,   53,  276,  288,  291,  289,  292,  277,   52,
      295,   53,  290,  311,   53,  312,  293,   53,   53,  297,
       53,  294,  313,   52,  315,  307,  296,   53,   53,   53,

      298,   53,   52,  310,   52,   52,  311,   53,  312,   53,
       53,   53,  313,   53,   52,  315,  328,   53,   52,   53,
       53,   53,   52,   53,  314,   52,  306,   53,  316,  328,
       53,  326,   52,  340,   53,  305,   52,   53,   53,  342,
      317,   53,  334,  304,   53,  340,  327,   52,  329,  335,
       53,  342,   53,  336,  348,  348,   53,  303,  302,   53,
       53,  301,  300,  273,  299,  287,  286,  285,  346,  284,
      252,  341,   54,   54,   54,   56,   56,   56,   56,   79,
       79,   79,   79,  101,  101,  283,  282,  281,  280,  247,
      279,  278,  244,  275,  274,  273,  272,  255,  254,  251,

      250,  249,  248,  247,  212,  211,  246,  245,  244,  243,
      206,  242,  241,  240,  239,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  205,  204,
      203,  202,  181,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,
      144,  143,  142,  141,  140,  139,  136,  135,  132,  131,
      130,  129,  128,  127,  126,  125,  124,   81,   80,   80,
       57,   55,   51,   50,  102,  100,   99,   98,   97,   96,
       95,   92,   86,   85,   55,   51,   50,   30,   80,   55,
       51,   50,   49,   30,  350,    3,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350
    } ;

static yyconst short int yy_chk[735] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,  355,
       11,    2,    5,    5,    5,   11,   13,   13,    5,    5,
       15,   39,   26,   39,    5,   15,   14,   26,    5,    5,
        5,   14,    5,    5,    5,  349,    5,  347,    5,   26,
        5,    5,    5,    5,    5,    5,   16,   17,   14,   15,
       19,   16,   17,   18,   20,   19,   14,   21,   18,   20,
       22,   23,   21,   24,   25,   22,   23,   16,   24,   25,

       18,   27,   19,   17,   27,   17,  345,   18,   20,   18,
       35,   35,   36,   20,   24,   57,   21,   40,   42,  344,
       36,  343,   23,   42,   40,   22,   40,   25,   52,   54,
       59,   57,   60,   52,   54,   59,   61,   60,   62,   63,
       64,   61,   65,   62,   63,   64,   66,   65,   68,   67,
       69,   66,  339,   68,   67,   69,   70,   62,  338,   71,
       64,   70,   60,   59,   71,   61,   67,   71,   65,   72,
      337,   63,   66,   73,   72,   70,   74,   81,   73,   75,
       76,   74,   69,   77,   75,   76,   77,   71,  103,   95,
       72,   92,  102,   81,   73,  333,   92,  104,  105,  332,

      102,  106,  104,  105,  103,  145,  106,  107,   74,   95,
       75,   76,  107,  331,  145,  108,  109,  110,  104,  105,
      108,  109,  110,  111,  112,  113,  115,  106,  111,  112,
      113,  115,  116,  107,  117,  330,  108,  116,  325,  117,
      109,  119,  324,  110,  111,  118,  119,  112,  323,  116,
      118,  120,  121,  118,  322,  122,  120,  121,  133,  115,
      122,  123,  146,  133,  147,  117,  123,  146,  321,  147,
      148,  149,  119,  121,  320,  148,  149,  150,  151,  122,
      152,  120,  150,  151,  123,  152,  319,  318,  149,  153,
      154,  148,  147,  146,  153,  154,  168,  155,  152,  156,

      151,  150,  155,  157,  156,  158,  159,  160,  157,  161,
      158,  159,  160,  162,  161,  218,  182,  153,  162,  309,
      168,  182,  163,  218,  157,  156,  183,  163,  160,  308,
      184,  183,  307,  186,  183,  184,  158,  159,  186,  185,
      187,  162,  161,  163,  185,  187,  188,  189,  190,  191,
      184,  188,  189,  190,  191,  192,  185,  193,  194,  306,
      192,  305,  193,  194,  186,  190,  191,  195,  188,  196,
      197,  199,  195,  198,  196,  197,  199,  200,  198,  199,
      201,  223,  200,  224,  222,  201,  223,  225,  224,  222,
      196,  226,  225,  227,  197,  304,  226,  303,  227,  195,

      200,  198,  222,  302,  228,  229,  301,  230,  225,  228,
      229,  224,  230,  201,  231,  232,  233,  234,  300,  231,
      232,  233,  234,  228,  235,  236,  237,  299,  286,  235,
      236,  237,  229,  238,  232,  231,  233,  234,  238,  243,
      257,  238,  236,  258,  243,  257,  259,  260,  258,  261,
      263,  259,  260,  265,  261,  263,  264,  266,  265,  267,
      268,  264,  266,  269,  267,  268,  270,  271,  269,  285,
      284,  270,  271,  276,  257,  263,  289,  264,  276,  288,
      267,  289,  290,  291,  288,  292,  265,  290,  291,  269,
      292,  266,  293,  294,  295,  283,  296,  293,  294,  295,

      271,  296,  297,  288,  298,  310,  311,  297,  312,  298,
      310,  311,  313,  312,  314,  315,  316,  313,  317,  314,
      315,  316,  326,  317,  294,  327,  282,  326,  297,  328,
      327,  310,  329,  334,  328,  281,  335,  329,  334,  336,
      298,  335,  326,  280,  336,  340,  314,  341,  317,  327,
      340,  342,  341,  329,  346,  348,  342,  279,  278,  346,
      348,  275,  274,  273,  272,  256,  255,  254,  341,  253,
      252,  335,  351,  351,  351,  352,  352,  352,  352,  353,
      353,  353,  353,  354,  354,  251,  250,  249,  248,  247,
      246,  245,  244,  242,  241,  240,  239,  220,  219,  217,

      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  181,  180,  179,  178,  177,
      176,  175,  174,  173,  172,  171,  170,  169,  167,  166,
      165,  164,  143,  142,  141,  140,  139,  138,  137,  136,
      135,  132,  131,  130,  129,  128,  127,  126,  125,  124,
      101,  100,   99,   98,   97,   96,   94,   93,   91,   90,
       89,   88,   87,   86,   85,   84,   83,   82,   79,   78,
       58,   55,   51,   50,   49,   48,   47,   46,   45,   44,
       43,   41,   38,   37,   34,   33,   32,   31,   28,   12,
       10,    9,    8,    7,    3,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "interface.fl"
#define INITIAL 0
/* -*- text -*- */
/* Note: we automatically generate a flex file from this list of
 * tokens by generating rules for the tokens defined below.
 */
#line 8 "../interface.qfl"
#include <nt_all.hh>
#include <interface.tab.hh>
#include <Token.hh>
#include <InterfaceLexer.hh>
#include <InterfaceParser.hh>
/*
 * Identifiers may contain alphanumerics, dash, underscore, and
 * period.  We repeat [_[:alnum:]\.-]+ below for this purpose as
 * needed.  Note that we put _ first to avoid having two consecutive
 * "[" characters, which is rejected by m4 which flex uses starting at
 * version 2.5.30.
 *
 * Note that the C++ code that receives tokens recognized here shares
 * knowledge with this file about the nature of the tokens.  Finer
 * parsing is done there using regular expressions.
 *
 * Whitespace handling is tricky in our grammar.  It's significant in
 * some places but not in others, more or less like how make variables
 * are assigned.  We deal with this by allowing keyword and operator
 * tokens to suck in ignorable whitespace around them.
 */
/* comments, as a special case, are consumed by the lexer */
/* be flexible about line terminators */
/* Trailing backslash followed by a newline is a line continuation
 * character and is embedded in the tok_spaces token.  Any other
 * character preceded by a backslash will be treated as that
 * character.  That catches all use of backslash except a trailing
 * backslash as the last character in the file, which will be
 * recognized as tok_other. */
/* operators */
/* keywords */
/* remaining syntax */
#line 656 "FlexLexer.interface.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 88 "interface.fl"


#line 789 "FlexLexer.interface.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &std::cin;

		if ( ! yyout )
			yyout = &std::cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 351 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 696 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "interface.fl"
{
    parser->createToken(yytext);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 94 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_newline;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_quotedchar;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 104 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_equal;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 109 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_comma;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 114 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_clope;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 119 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_if;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 124 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_elseif;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 129 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_else;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 134 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_endif;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 139 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_reset;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 144 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_reset_all;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_no_reset;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 154 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_override;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 159 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_fallback;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 164 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_flag;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 169 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_declare;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 174 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_boolean;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 179 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_string;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 184 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_filename;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 189 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_list;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 194 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_append;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 199 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_prepend;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 204 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_nonrecursive;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 209 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_local;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 214 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_afterbuild;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 219 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_targettype;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 224 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_function;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 229 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_identifier;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 234 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_variable;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 239 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_environment;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 244 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_spaces;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 249 "interface.fl"
{
    parser->setToken(parser->createToken(yytext));
    return tok_other;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 254 "interface.fl"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1141 "FlexLexer.interface.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 351 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 351 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 350);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}

void yyFlexLexer::yyrestart( std::istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	std::cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 254 "interface.fl"

